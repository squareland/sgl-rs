use std::os::raw::c_void;

pub mod types;
pub mod constants;

pub use types::*;
pub use constants::*;

#[inline(never)]
fn metaloadfn(loadfn: &mut dyn FnMut(&'static str) -> *const c_void, symbol: &'static str,
              fallbacks: &[&'static str]) -> *const c_void {
    let mut ptr = loadfn(symbol);
    if ptr.is_null() {
        for &sym in fallbacks {
            ptr = loadfn(sym);
            if !ptr.is_null() { break; }
        }
    }
    ptr
}

macro_rules! defn {
    ($namespace: ident ($($arg:ident : $ty:ty),*) -> $ret:ty $(, $fallback: ident)*) => {
        #[allow(non_snake_case, unused_variables, dead_code)]
        #[inline]
        pub unsafe fn $namespace($($arg: $ty),*) -> $ret { std::mem::transmute::<_, extern "system" fn($($ty),*) -> $ret>($namespace::PTR.f)($($arg),*) }

        #[allow(non_snake_case)]
        pub mod $namespace {
            use std::os::raw::c_void;
            use super::metaloadfn;
            use super::FnPtr;

            pub static mut PTR: FnPtr = FnPtr {
                f: missing_fn_panic as *const c_void,
                is_loaded: false
            };

            #[inline(never)]
            fn missing_fn_panic() -> ! {
                panic!(concat!("gl function `", stringify!($namespace), "` was not loaded"));
            }

            #[inline]
            #[allow(dead_code)]
            pub fn is_loaded() -> bool {
                unsafe { PTR.is_loaded }
            }

            #[allow(dead_code)]
            pub fn load_with<F>(mut loadfn: F) where F: FnMut(&'static str) -> *const c_void {
                unsafe {
                    let ptr = metaloadfn(&mut loadfn, concat!("gl", stringify!($namespace)), &[$(concat!("gl", stringify!($fallback))),*]);
                    if !ptr.is_null() {
                        PTR = FnPtr {
                            f: ptr,
                            is_loaded: true,
                        };
                    }
                }
            }
        }
    };
}

defn!(Accum(op: GLenum, value: GLfloat) -> ());
defn!(ActiveShaderProgram(pipeline: GLuint, program: GLuint) -> ());
defn!(ActiveTexture(texture: GLenum) -> (), ActiveTextureARB);
defn!(AlphaFunc(func: GLenum, ref_: GLfloat) -> ());
defn!(AreTexturesResident(n: GLsizei, textures: *const GLuint, residences: *mut GLboolean) -> GLboolean);
defn!(ArrayElement(i: GLint) -> (), ArrayElementEXT);
defn!(AttachShader(program: GLuint, shader: GLuint) -> (), AttachObjectARB);
defn!(Begin(mode: GLenum) -> ());
defn!(BeginConditionalRender(id: GLuint, mode: GLenum) -> (), BeginConditionalRenderNV);
defn!(BeginQuery(target: GLenum, id: GLuint) -> (), BeginQueryARB);
defn!(BeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint) -> ());
defn!(BeginTransformFeedback(primitiveMode: GLenum) -> (), BeginTransformFeedbackNV);
defn!(BindAttribLocation(program: GLuint, index: GLuint, name: *const GLchar) -> (), BindAttribLocationARB);
defn!(BindBuffer(target: GLenum, buffer: GLuint) -> (), BindBufferARB);
defn!(BindBufferBase(target: GLenum, index: GLuint, buffer: GLuint) -> (), BindBufferBaseNV);
defn!(BindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> (), BindBufferRangeNV);
defn!(BindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint) -> ());
defn!(BindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, sizes: *const GLsizeiptr) -> ());
defn!(BindFragDataLocation(program: GLuint, color: GLuint, name: *const GLchar) -> (), BindFragDataLocationEXT);
defn!(BindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: *const GLchar) -> (), BindFragDataLocationIndexedEXT);
defn!(BindFramebuffer(target: GLenum, framebuffer: GLuint) -> ());
defn!(BindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> ());
defn!(BindImageTextures(first: GLuint, count: GLsizei, textures: *const GLuint) -> ());
defn!(BindProgramPipeline(pipeline: GLuint) -> ());
defn!(BindRenderbuffer(target: GLenum, renderbuffer: GLuint) -> ());
defn!(BindSampler(unit: GLuint, sampler: GLuint) -> ());
defn!(BindSamplers(first: GLuint, count: GLsizei, samplers: *const GLuint) -> ());
defn!(BindTexture(target: GLenum, texture: GLuint) -> (), BindTextureEXT);
defn!(BindTextureUnit(unit: GLuint, texture: GLuint) -> ());
defn!(BindTextures(first: GLuint, count: GLsizei, textures: *const GLuint) -> ());
defn!(BindTransformFeedback(target: GLenum, id: GLuint) -> ());
defn!(BindVertexArray(array: GLuint) -> (), BindVertexArrayOES);
defn!(BindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> ());
defn!(BindVertexBuffers(first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, strides: *const GLsizei) -> ());
defn!(Bitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *const GLubyte) -> ());
defn!(BlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> (), BlendColorEXT);
defn!(BlendEquation(mode: GLenum) -> (), BlendEquationEXT);
defn!(BlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) -> (), BlendEquationSeparateEXT);
defn!(BlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> (), BlendEquationSeparateiOES);
defn!(BlendEquationi(buf: GLuint, mode: GLenum) -> (), BlendEquationiOES);
defn!(BlendFunc(sfactor: GLenum, dfactor: GLenum) -> ());
defn!(BlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> (), BlendFuncSeparateINGR);
defn!(BlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> (), BlendFuncSeparateiOES);
defn!(BlendFunci(buf: GLuint, src: GLenum, dst: GLenum) -> (), BlendFunciOES);
defn!(BlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> (), BlitFramebufferNV);
defn!(BlitNamedFramebuffer(readFramebuffer: GLuint, drawFramebuffer: GLuint, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> ());
defn!(BufferData(target: GLenum, size: GLsizeiptr, data: *const c_void, usage: GLenum) -> (), BufferDataARB);
defn!(BufferStorage(target: GLenum, size: GLsizeiptr, data: *const c_void, flags: GLbitfield) -> (), BufferStorageEXT);
defn!(BufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *const c_void) -> (), BufferSubDataARB);
defn!(CallList(list: GLuint) -> ());
defn!(CallLists(n: GLsizei, type_: GLenum, lists: *const c_void) -> ());
defn!(CheckFramebufferStatus(target: GLenum) -> GLenum, CheckFramebufferStatusEXT);
defn!(CheckNamedFramebufferStatus(framebuffer: GLuint, target: GLenum) -> GLenum);
defn!(ClampColor(target: GLenum, clamp: GLenum) -> (), ClampColorARB);
defn!(Clear(mask: GLbitfield) -> ());
defn!(ClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> ());
defn!(ClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *const c_void) -> ());
defn!(ClearBufferSubData(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *const c_void) -> ());
defn!(ClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> ());
defn!(ClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: *const GLfloat) -> ());
defn!(ClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: *const GLint) -> ());
defn!(ClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: *const GLuint) -> ());
defn!(ClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> ());
defn!(ClearDepth(depth: GLdouble) -> ());
defn!(ClearDepthf(d: GLfloat) -> (), ClearDepthfOES);
defn!(ClearIndex(c: GLfloat) -> ());
defn!(ClearNamedBufferData(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *const c_void) -> ());
defn!(ClearNamedBufferSubData(buffer: GLuint, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *const c_void) -> ());
defn!(ClearNamedFramebufferfi(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> ());
defn!(ClearNamedFramebufferfv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLfloat) -> ());
defn!(ClearNamedFramebufferiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLint) -> ());
defn!(ClearNamedFramebufferuiv(framebuffer: GLuint, buffer: GLenum, drawbuffer: GLint, value: *const GLuint) -> ());
defn!(ClearStencil(s: GLint) -> ());
defn!(ClearTexImage(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *const c_void) -> (), ClearTexImageEXT);
defn!(ClearTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *const c_void) -> (), ClearTexSubImageEXT);
defn!(ClientActiveTexture(texture: GLenum) -> (), ClientActiveTextureARB);
defn!(ClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum, ClientWaitSyncAPPLE);
defn!(ClipControl(origin: GLenum, depth: GLenum) -> (), ClipControlEXT);
defn!(ClipPlane(plane: GLenum, equation: *const GLdouble) -> ());
defn!(Color3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> ());
defn!(Color3bv(v: *const GLbyte) -> ());
defn!(Color3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> ());
defn!(Color3dv(v: *const GLdouble) -> ());
defn!(Color3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> ());
defn!(Color3fv(v: *const GLfloat) -> ());
defn!(Color3i(red: GLint, green: GLint, blue: GLint) -> ());
defn!(Color3iv(v: *const GLint) -> ());
defn!(Color3s(red: GLshort, green: GLshort, blue: GLshort) -> ());
defn!(Color3sv(v: *const GLshort) -> ());
defn!(Color3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> ());
defn!(Color3ubv(v: *const GLubyte) -> ());
defn!(Color3ui(red: GLuint, green: GLuint, blue: GLuint) -> ());
defn!(Color3uiv(v: *const GLuint) -> ());
defn!(Color3us(red: GLushort, green: GLushort, blue: GLushort) -> ());
defn!(Color3usv(v: *const GLushort) -> ());
defn!(Color4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> ());
defn!(Color4bv(v: *const GLbyte) -> ());
defn!(Color4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> ());
defn!(Color4dv(v: *const GLdouble) -> ());
defn!(Color4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> ());
defn!(Color4fv(v: *const GLfloat) -> ());
defn!(Color4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> ());
defn!(Color4iv(v: *const GLint) -> ());
defn!(Color4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> ());
defn!(Color4sv(v: *const GLshort) -> ());
defn!(Color4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> ());
defn!(Color4ubv(v: *const GLubyte) -> ());
defn!(Color4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> ());
defn!(Color4uiv(v: *const GLuint) -> ());
defn!(Color4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> ());
defn!(Color4usv(v: *const GLushort) -> ());
defn!(ColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> ());
defn!(ColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> (), ColorMaskiOES);
defn!(ColorMaterial(face: GLenum, mode: GLenum) -> ());
defn!(ColorP3ui(type_: GLenum, color: GLuint) -> ());
defn!(ColorP3uiv(type_: GLenum, color: *const GLuint) -> ());
defn!(ColorP4ui(type_: GLenum, color: GLuint) -> ());
defn!(ColorP4uiv(type_: GLenum, color: *const GLuint) -> ());
defn!(ColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) -> ());
defn!(CompileShader(shader: GLuint) -> (), CompileShaderARB);
defn!(CompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) -> (), CompressedTexImage1DARB);
defn!(CompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) -> (), CompressedTexImage2DARB);
defn!(CompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *const c_void) -> (), CompressedTexImage3DARB);
defn!(CompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) -> (), CompressedTexSubImage1DARB);
defn!(CompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) -> (), CompressedTexSubImage2DARB);
defn!(CompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) -> (), CompressedTexSubImage3DARB);
defn!(CompressedTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) -> ());
defn!(CompressedTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) -> ());
defn!(CompressedTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *const c_void) -> ());
defn!(CopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> (), CopyBufferSubDataNV);
defn!(CopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> (), CopyImageSubDataOES);
defn!(CopyNamedBufferSubData(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> ());
defn!(CopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum) -> ());
defn!(CopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> (), CopyTexImage1DEXT);
defn!(CopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> (), CopyTexImage2DEXT);
defn!(CopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> (), CopyTexSubImage1DEXT);
defn!(CopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> (), CopyTexSubImage2DEXT);
defn!(CopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> (), CopyTexSubImage3DEXT);
defn!(CopyTextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> ());
defn!(CopyTextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> ());
defn!(CopyTextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> ());
defn!(CreateBuffers(n: GLsizei, buffers: *mut GLuint) -> ());
defn!(CreateFramebuffers(n: GLsizei, framebuffers: *mut GLuint) -> ());
defn!(CreateProgram() -> GLuint, CreateProgramObjectARB);
defn!(CreateProgramPipelines(n: GLsizei, pipelines: *mut GLuint) -> ());
defn!(CreateQueries(target: GLenum, n: GLsizei, ids: *mut GLuint) -> ());
defn!(CreateRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint) -> ());
defn!(CreateSamplers(n: GLsizei, samplers: *mut GLuint) -> ());
defn!(CreateShader(type_: GLenum) -> GLuint, CreateShaderObjectARB);
defn!(CreateShaderProgramv(type_: GLenum, count: GLsizei, strings: *const *const GLchar) -> GLuint);
defn!(CreateTextures(target: GLenum, n: GLsizei, textures: *mut GLuint) -> ());
defn!(CreateTransformFeedbacks(n: GLsizei, ids: *mut GLuint) -> ());
defn!(CreateVertexArrays(n: GLsizei, arrays: *mut GLuint) -> ());
defn!(CullFace(mode: GLenum) -> ());
defn!(DebugMessageCallback(callback: GLDEBUGPROC, userParam: *const c_void) -> (), DebugMessageCallbackKHR);
defn!(DebugMessageControl(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *const GLuint, enabled: GLboolean) -> (), DebugMessageControlKHR);
defn!(DebugMessageInsert(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *const GLchar) -> (), DebugMessageInsertKHR);
defn!(DeleteBuffers(n: GLsizei, buffers: *const GLuint) -> (), DeleteBuffersARB);
defn!(DeleteFramebuffers(n: GLsizei, framebuffers: *const GLuint) -> (), DeleteFramebuffersEXT);
defn!(DeleteLists(list: GLuint, range: GLsizei) -> ());
defn!(DeleteProgram(program: GLuint) -> ());
defn!(DeleteProgramPipelines(n: GLsizei, pipelines: *const GLuint) -> ());
defn!(DeleteQueries(n: GLsizei, ids: *const GLuint) -> (), DeleteQueriesARB);
defn!(DeleteRenderbuffers(n: GLsizei, renderbuffers: *const GLuint) -> (), DeleteRenderbuffersEXT);
defn!(DeleteSamplers(count: GLsizei, samplers: *const GLuint) -> ());
defn!(DeleteShader(shader: GLuint) -> ());
defn!(DeleteSync(sync: GLsync) -> (), DeleteSyncAPPLE);
defn!(DeleteTextures(n: GLsizei, textures: *const GLuint) -> ());
defn!(DeleteTransformFeedbacks(n: GLsizei, ids: *const GLuint) -> (), DeleteTransformFeedbacksNV);
defn!(DeleteVertexArrays(n: GLsizei, arrays: *const GLuint) -> (), DeleteVertexArraysOES);
defn!(DepthFunc(func: GLenum) -> ());
defn!(DepthMask(flag: GLboolean) -> ());
defn!(DepthRange(n: GLdouble, f: GLdouble) -> ());
defn!(DepthRangeArrayv(first: GLuint, count: GLsizei, v: *const GLdouble) -> ());
defn!(DepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble) -> ());
defn!(DepthRangef(n: GLfloat, f: GLfloat) -> (), DepthRangefOES);
defn!(DetachShader(program: GLuint, shader: GLuint) -> (), DetachObjectARB);
defn!(Disable(cap: GLenum) -> ());
defn!(DisableClientState(array: GLenum) -> ());
defn!(DisableVertexArrayAttrib(vaobj: GLuint, index: GLuint) -> ());
defn!(DisableVertexAttribArray(index: GLuint) -> (), DisableVertexAttribArrayARB);
defn!(Disablei(target: GLenum, index: GLuint) -> (), DisableiOES);
defn!(DispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> ());
defn!(DispatchComputeIndirect(indirect: GLintptr) -> ());
defn!(DrawArrays(mode: GLenum, first: GLint, count: GLsizei) -> (), DrawArraysEXT);
defn!(DrawArraysIndirect(mode: GLenum, indirect: *const c_void) -> ());
defn!(DrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> (), DrawArraysInstancedNV);
defn!(DrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> (), DrawArraysInstancedBaseInstanceEXT);
defn!(DrawBuffer(buf: GLenum) -> ());
defn!(DrawBuffers(n: GLsizei, bufs: *const GLenum) -> (), DrawBuffersEXT);
defn!(DrawElements(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void) -> ());
defn!(DrawElementsBaseVertex(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, basevertex: GLint) -> (), DrawElementsBaseVertexOES);
defn!(DrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *const c_void) -> ());
defn!(DrawElementsInstanced(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei) -> (), DrawElementsInstancedNV);
defn!(DrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei, baseinstance: GLuint) -> (), DrawElementsInstancedBaseInstanceEXT);
defn!(DrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei, basevertex: GLint) -> (), DrawElementsInstancedBaseVertexOES);
defn!(DrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> (), DrawElementsInstancedBaseVertexBaseInstanceEXT);
defn!(DrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) -> ());
defn!(DrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const c_void) -> (), DrawRangeElementsEXT);
defn!(DrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *const c_void, basevertex: GLint) -> (), DrawRangeElementsBaseVertexOES);
defn!(DrawTransformFeedback(mode: GLenum, id: GLuint) -> (), DrawTransformFeedbackNV);
defn!(DrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei) -> (), DrawTransformFeedbackInstancedEXT);
defn!(DrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint) -> ());
defn!(DrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> ());
defn!(EdgeFlag(flag: GLboolean) -> ());
defn!(EdgeFlagPointer(stride: GLsizei, pointer: *const c_void) -> ());
defn!(EdgeFlagv(flag: *const GLboolean) -> ());
defn!(Enable(cap: GLenum) -> ());
defn!(EnableClientState(array: GLenum) -> ());
defn!(EnableVertexArrayAttrib(vaobj: GLuint, index: GLuint) -> ());
defn!(EnableVertexAttribArray(index: GLuint) -> (), EnableVertexAttribArrayARB);
defn!(Enablei(target: GLenum, index: GLuint) -> (), EnableiOES);
defn!(End() -> ());
defn!(EndConditionalRender() -> (), EndConditionalRenderNVX);
defn!(EndList() -> ());
defn!(EndQuery(target: GLenum) -> (), EndQueryARB);
defn!(EndQueryIndexed(target: GLenum, index: GLuint) -> ());
defn!(EndTransformFeedback() -> (), EndTransformFeedbackNV);
defn!(EvalCoord1d(u: GLdouble) -> ());
defn!(EvalCoord1dv(u: *const GLdouble) -> ());
defn!(EvalCoord1f(u: GLfloat) -> ());
defn!(EvalCoord1fv(u: *const GLfloat) -> ());
defn!(EvalCoord2d(u: GLdouble, v: GLdouble) -> ());
defn!(EvalCoord2dv(u: *const GLdouble) -> ());
defn!(EvalCoord2f(u: GLfloat, v: GLfloat) -> ());
defn!(EvalCoord2fv(u: *const GLfloat) -> ());
defn!(EvalMesh1(mode: GLenum, i1: GLint, i2: GLint) -> ());
defn!(EvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> ());
defn!(EvalPoint1(i: GLint) -> ());
defn!(EvalPoint2(i: GLint, j: GLint) -> ());
defn!(FeedbackBuffer(size: GLsizei, type_: GLenum, buffer: *mut GLfloat) -> ());
defn!(FenceSync(condition: GLenum, flags: GLbitfield) -> GLsync, FenceSyncAPPLE);
defn!(Finish() -> ());
defn!(Flush() -> ());
defn!(FlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> (), FlushMappedBufferRangeEXT);
defn!(FlushMappedNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> ());
defn!(FogCoordPointer(type_: GLenum, stride: GLsizei, pointer: *const c_void) -> (), FogCoordPointerEXT);
defn!(FogCoordd(coord: GLdouble) -> (), FogCoorddEXT);
defn!(FogCoorddv(coord: *const GLdouble) -> (), FogCoorddvEXT);
defn!(FogCoordf(coord: GLfloat) -> (), FogCoordfEXT);
defn!(FogCoordfv(coord: *const GLfloat) -> (), FogCoordfvEXT);
defn!(Fogf(pname: GLenum, param: GLfloat) -> ());
defn!(Fogfv(pname: GLenum, params: *const GLfloat) -> ());
defn!(Fogi(pname: GLenum, param: GLint) -> ());
defn!(Fogiv(pname: GLenum, params: *const GLint) -> ());
defn!(FramebufferParameteri(target: GLenum, pname: GLenum, param: GLint) -> ());
defn!(FramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> (), FramebufferRenderbufferEXT);
defn!(FramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> (), FramebufferTextureOES);
defn!(FramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> (), FramebufferTexture1DEXT);
defn!(FramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> (), FramebufferTexture2DEXT);
defn!(FramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> (), FramebufferTexture3DEXT);
defn!(FramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> (), FramebufferTextureLayerEXT);
defn!(FrontFace(mode: GLenum) -> ());
defn!(Frustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> ());
defn!(GenBuffers(n: GLsizei, buffers: *mut GLuint) -> (), GenBuffersARB);
defn!(GenFramebuffers(n: GLsizei, framebuffers: *mut GLuint) -> (), GenFramebuffersEXT);
defn!(GenLists(range: GLsizei) -> GLuint);
defn!(GenProgramPipelines(n: GLsizei, pipelines: *mut GLuint) -> ());
defn!(GenQueries(n: GLsizei, ids: *mut GLuint) -> (), GenQueriesARB);
defn!(GenRenderbuffers(n: GLsizei, renderbuffers: *mut GLuint) -> (), GenRenderbuffersEXT);
defn!(GenSamplers(count: GLsizei, samplers: *mut GLuint) -> ());
defn!(GenTextures(n: GLsizei, textures: *mut GLuint) -> ());
defn!(GenTransformFeedbacks(n: GLsizei, ids: *mut GLuint) -> (), GenTransformFeedbacksNV);
defn!(GenVertexArrays(n: GLsizei, arrays: *mut GLuint) -> (), GenVertexArraysOES);
defn!(GenerateMipmap(target: GLenum) -> (), GenerateMipmapEXT);
defn!(GenerateTextureMipmap(texture: GLuint) -> ());
defn!(GetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLint, type_: *mut GLenum, name: *mut GLchar) -> (), GetActiveAttribARB);
defn!(GetActiveSubroutineName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *mut GLsizei, name: *mut GLchar) -> ());
defn!(GetActiveSubroutineUniformName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *mut GLsizei, name: *mut GLchar) -> ());
defn!(GetActiveSubroutineUniformiv(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *mut GLint) -> ());
defn!(GetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLint, type_: *mut GLenum, name: *mut GLchar) -> (), GetActiveUniformARB);
defn!(GetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *mut GLsizei, uniformBlockName: *mut GLchar) -> ());
defn!(GetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *mut GLsizei, uniformName: *mut GLchar) -> ());
defn!(GetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: *const GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetAttachedShaders(program: GLuint, maxCount: GLsizei, count: *mut GLsizei, shaders: *mut GLuint) -> ());
defn!(GetAttribLocation(program: GLuint, name: *const GLchar) -> GLint, GetAttribLocationARB);
defn!(GetBooleani_v(target: GLenum, index: GLuint, data: *mut GLboolean) -> (), GetBooleanIndexedvEXT);
defn!(GetBooleanv(pname: GLenum, data: *mut GLboolean) -> ());
defn!(GetBufferParameteri64v(target: GLenum, pname: GLenum, params: *mut GLint64) -> ());
defn!(GetBufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> (), GetBufferParameterivARB);
defn!(GetBufferPointerv(target: GLenum, pname: GLenum, params: *const *mut c_void) -> (), GetBufferPointervOES);
defn!(GetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *mut c_void) -> (), GetBufferSubDataARB);
defn!(GetClipPlane(plane: GLenum, equation: *mut GLdouble) -> ());
defn!(GetCompressedTexImage(target: GLenum, level: GLint, img: *mut c_void) -> (), GetCompressedTexImageARB);
defn!(GetCompressedTextureImage(texture: GLuint, level: GLint, bufSize: GLsizei, pixels: *mut c_void) -> ());
defn!(GetCompressedTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, bufSize: GLsizei, pixels: *mut c_void) -> ());
defn!(GetDebugMessageLog(count: GLuint, bufSize: GLsizei, sources: *mut GLenum, types: *mut GLenum, ids: *mut GLuint, severities: *mut GLenum, lengths: *mut GLsizei, messageLog: *mut GLchar) -> GLuint, GetDebugMessageLogKHR);
defn!(GetDoublei_v(target: GLenum, index: GLuint, data: *mut GLdouble) -> (), GetDoublei_vEXT);
defn!(GetDoublev(pname: GLenum, data: *mut GLdouble) -> ());
defn!(GetError() -> GLenum);
defn!(GetFloati_v(target: GLenum, index: GLuint, data: *mut GLfloat) -> (), GetFloati_vOES);
defn!(GetFloatv(pname: GLenum, data: *mut GLfloat) -> ());
defn!(GetFragDataIndex(program: GLuint, name: *const GLchar) -> GLint, GetFragDataIndexEXT);
defn!(GetFragDataLocation(program: GLuint, name: *const GLchar) -> GLint, GetFragDataLocationEXT);
defn!(GetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: *mut GLint) -> (), GetFramebufferAttachmentParameterivEXT);
defn!(GetFramebufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> ());
defn!(GetGraphicsResetStatus() -> GLenum, GetGraphicsResetStatusKHR);
defn!(GetInteger64i_v(target: GLenum, index: GLuint, data: *mut GLint64) -> ());
defn!(GetInteger64v(pname: GLenum, data: *mut GLint64) -> (), GetInteger64vAPPLE);
defn!(GetIntegeri_v(target: GLenum, index: GLuint, data: *mut GLint) -> (), GetIntegerIndexedvEXT);
defn!(GetIntegerv(pname: GLenum, data: *mut GLint) -> ());
defn!(GetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *mut GLint64) -> ());
defn!(GetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *mut GLint) -> ());
defn!(GetLightfv(light: GLenum, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetLightiv(light: GLenum, pname: GLenum, params: *mut GLint) -> ());
defn!(GetMapdv(target: GLenum, query: GLenum, v: *mut GLdouble) -> ());
defn!(GetMapfv(target: GLenum, query: GLenum, v: *mut GLfloat) -> ());
defn!(GetMapiv(target: GLenum, query: GLenum, v: *mut GLint) -> ());
defn!(GetMaterialfv(face: GLenum, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetMaterialiv(face: GLenum, pname: GLenum, params: *mut GLint) -> ());
defn!(GetMultisamplefv(pname: GLenum, index: GLuint, val: *mut GLfloat) -> (), GetMultisamplefvNV);
defn!(GetNamedBufferParameteri64v(buffer: GLuint, pname: GLenum, params: *mut GLint64) -> ());
defn!(GetNamedBufferParameteriv(buffer: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetNamedBufferPointerv(buffer: GLuint, pname: GLenum, params: *const *mut c_void) -> ());
defn!(GetNamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *mut c_void) -> ());
defn!(GetNamedFramebufferAttachmentParameteriv(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *mut GLint) -> ());
defn!(GetNamedFramebufferParameteriv(framebuffer: GLuint, pname: GLenum, param: *mut GLint) -> ());
defn!(GetNamedRenderbufferParameteriv(renderbuffer: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *mut GLsizei, label: *mut GLchar) -> (), GetObjectLabelKHR);
defn!(GetObjectPtrLabel(ptr: *const c_void, bufSize: GLsizei, length: *mut GLsizei, label: *mut GLchar) -> (), GetObjectPtrLabelKHR);
defn!(GetPixelMapfv(map: GLenum, values: *mut GLfloat) -> ());
defn!(GetPixelMapuiv(map: GLenum, values: *mut GLuint) -> ());
defn!(GetPixelMapusv(map: GLenum, values: *mut GLushort) -> ());
defn!(GetPointerv(pname: GLenum, params: *const *mut c_void) -> (), GetPointervKHR);
defn!(GetPolygonStipple(mask: *mut GLubyte) -> ());
defn!(GetProgramBinary(program: GLuint, bufSize: GLsizei, length: *mut GLsizei, binaryFormat: *mut GLenum, binary: *mut c_void) -> (), GetProgramBinaryOES);
defn!(GetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar) -> ());
defn!(GetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: *mut GLint) -> ());
defn!(GetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar) -> ());
defn!(GetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLuint);
defn!(GetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint);
defn!(GetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: *const GLchar) -> GLint);
defn!(GetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, name: *mut GLchar) -> ());
defn!(GetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *const GLenum, bufSize: GLsizei, length: *mut GLsizei, params: *mut GLint) -> ());
defn!(GetProgramStageiv(program: GLuint, shadertype: GLenum, pname: GLenum, values: *mut GLint) -> ());
defn!(GetProgramiv(program: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetQueryBufferObjecti64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> ());
defn!(GetQueryBufferObjectiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> ());
defn!(GetQueryBufferObjectui64v(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> ());
defn!(GetQueryBufferObjectuiv(id: GLuint, buffer: GLuint, pname: GLenum, offset: GLintptr) -> ());
defn!(GetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetQueryObjecti64v(id: GLuint, pname: GLenum, params: *mut GLint64) -> (), GetQueryObjecti64vEXT);
defn!(GetQueryObjectiv(id: GLuint, pname: GLenum, params: *mut GLint) -> (), GetQueryObjectivEXT);
defn!(GetQueryObjectui64v(id: GLuint, pname: GLenum, params: *mut GLuint64) -> (), GetQueryObjectui64vEXT);
defn!(GetQueryObjectuiv(id: GLuint, pname: GLenum, params: *mut GLuint) -> (), GetQueryObjectuivARB);
defn!(GetQueryiv(target: GLenum, pname: GLenum, params: *mut GLint) -> (), GetQueryivARB);
defn!(GetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> (), GetRenderbufferParameterivEXT);
defn!(GetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: *mut GLint) -> (), GetSamplerParameterIivOES);
defn!(GetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: *mut GLuint) -> (), GetSamplerParameterIuivOES);
defn!(GetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: *mut GLsizei, infoLog: *mut GLchar) -> ());
defn!(GetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: *mut GLint, precision: *mut GLint) -> ());
defn!(GetShaderSource(shader: GLuint, bufSize: GLsizei, length: *mut GLsizei, source: *mut GLchar) -> (), GetShaderSourceARB);
defn!(GetShaderiv(shader: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetString(name: GLenum) -> *const GLubyte);
defn!(GetStringi(name: GLenum, index: GLuint) -> *const GLubyte);
defn!(GetSubroutineIndex(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLuint);
defn!(GetSubroutineUniformLocation(program: GLuint, shadertype: GLenum, name: *const GLchar) -> GLint);
defn!(GetSynciv(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *mut GLsizei, values: *mut GLint) -> (), GetSyncivAPPLE);
defn!(GetTexEnvfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetTexEnviv(target: GLenum, pname: GLenum, params: *mut GLint) -> ());
defn!(GetTexGendv(coord: GLenum, pname: GLenum, params: *mut GLdouble) -> ());
defn!(GetTexGenfv(coord: GLenum, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetTexGeniv(coord: GLenum, pname: GLenum, params: *mut GLint) -> ());
defn!(GetTexImage(target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *mut c_void) -> ());
defn!(GetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetTexParameterIiv(target: GLenum, pname: GLenum, params: *mut GLint) -> (), GetTexParameterIivOES);
defn!(GetTexParameterIuiv(target: GLenum, pname: GLenum, params: *mut GLuint) -> (), GetTexParameterIuivOES);
defn!(GetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint) -> ());
defn!(GetTextureImage(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: *mut c_void) -> ());
defn!(GetTextureLevelParameterfv(texture: GLuint, level: GLint, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetTextureLevelParameteriv(texture: GLuint, level: GLint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetTextureParameterIiv(texture: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetTextureParameterIuiv(texture: GLuint, pname: GLenum, params: *mut GLuint) -> ());
defn!(GetTextureParameterfv(texture: GLuint, pname: GLenum, params: *mut GLfloat) -> ());
defn!(GetTextureParameteriv(texture: GLuint, pname: GLenum, params: *mut GLint) -> ());
defn!(GetTextureSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: *mut c_void) -> ());
defn!(GetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: *mut GLsizei, size: *mut GLsizei, type_: *mut GLenum, name: *mut GLchar) -> (), GetTransformFeedbackVaryingEXT);
defn!(GetTransformFeedbacki64_v(xfb: GLuint, pname: GLenum, index: GLuint, param: *mut GLint64) -> ());
defn!(GetTransformFeedbacki_v(xfb: GLuint, pname: GLenum, index: GLuint, param: *mut GLint) -> ());
defn!(GetTransformFeedbackiv(xfb: GLuint, pname: GLenum, param: *mut GLint) -> ());
defn!(GetUniformBlockIndex(program: GLuint, uniformBlockName: *const GLchar) -> GLuint);
defn!(GetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: *const *const GLchar, uniformIndices: *mut GLuint) -> ());
defn!(GetUniformLocation(program: GLuint, name: *const GLchar) -> GLint, GetUniformLocationARB);
defn!(GetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: *mut GLuint) -> ());
defn!(GetUniformdv(program: GLuint, location: GLint, params: *mut GLdouble) -> ());
defn!(GetUniformfv(program: GLuint, location: GLint, params: *mut GLfloat) -> (), GetUniformfvARB);
defn!(GetUniformiv(program: GLuint, location: GLint, params: *mut GLint) -> (), GetUniformivARB);
defn!(GetUniformuiv(program: GLuint, location: GLint, params: *mut GLuint) -> (), GetUniformuivEXT);
defn!(GetVertexArrayIndexed64iv(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint64) -> ());
defn!(GetVertexArrayIndexediv(vaobj: GLuint, index: GLuint, pname: GLenum, param: *mut GLint) -> ());
defn!(GetVertexArrayiv(vaobj: GLuint, pname: GLenum, param: *mut GLint) -> ());
defn!(GetVertexAttribIiv(index: GLuint, pname: GLenum, params: *mut GLint) -> (), GetVertexAttribIivEXT);
defn!(GetVertexAttribIuiv(index: GLuint, pname: GLenum, params: *mut GLuint) -> (), GetVertexAttribIuivEXT);
defn!(GetVertexAttribLdv(index: GLuint, pname: GLenum, params: *mut GLdouble) -> (), GetVertexAttribLdvEXT);
defn!(GetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: *const *mut c_void) -> (), GetVertexAttribPointervNV);
defn!(GetVertexAttribdv(index: GLuint, pname: GLenum, params: *mut GLdouble) -> (), GetVertexAttribdvNV);
defn!(GetVertexAttribfv(index: GLuint, pname: GLenum, params: *mut GLfloat) -> (), GetVertexAttribfvNV);
defn!(GetVertexAttribiv(index: GLuint, pname: GLenum, params: *mut GLint) -> (), GetVertexAttribivNV);
defn!(GetnColorTable(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, table: *mut c_void) -> ());
defn!(GetnCompressedTexImage(target: GLenum, lod: GLint, bufSize: GLsizei, pixels: *mut c_void) -> ());
defn!(GetnConvolutionFilter(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, image: *mut c_void) -> ());
defn!(GetnHistogram(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *mut c_void) -> ());
defn!(GetnMapdv(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLdouble) -> ());
defn!(GetnMapfv(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLfloat) -> ());
defn!(GetnMapiv(target: GLenum, query: GLenum, bufSize: GLsizei, v: *mut GLint) -> ());
defn!(GetnMinmax(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *mut c_void) -> ());
defn!(GetnPixelMapfv(map: GLenum, bufSize: GLsizei, values: *mut GLfloat) -> ());
defn!(GetnPixelMapuiv(map: GLenum, bufSize: GLsizei, values: *mut GLuint) -> ());
defn!(GetnPixelMapusv(map: GLenum, bufSize: GLsizei, values: *mut GLushort) -> ());
defn!(GetnPolygonStipple(bufSize: GLsizei, pattern: *mut GLubyte) -> ());
defn!(GetnSeparableFilter(target: GLenum, format: GLenum, type_: GLenum, rowBufSize: GLsizei, row: *mut c_void, columnBufSize: GLsizei, column: *mut c_void, span: *mut c_void) -> ());
defn!(GetnTexImage(target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, pixels: *mut c_void) -> ());
defn!(GetnUniformdv(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLdouble) -> ());
defn!(GetnUniformfv(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLfloat) -> (), GetnUniformfvKHR);
defn!(GetnUniformiv(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLint) -> (), GetnUniformivKHR);
defn!(GetnUniformuiv(program: GLuint, location: GLint, bufSize: GLsizei, params: *mut GLuint) -> (), GetnUniformuivKHR);
defn!(Hint(target: GLenum, mode: GLenum) -> ());
defn!(IndexMask(mask: GLuint) -> ());
defn!(IndexPointer(type_: GLenum, stride: GLsizei, pointer: *const c_void) -> ());
defn!(Indexd(c: GLdouble) -> ());
defn!(Indexdv(c: *const GLdouble) -> ());
defn!(Indexf(c: GLfloat) -> ());
defn!(Indexfv(c: *const GLfloat) -> ());
defn!(Indexi(c: GLint) -> ());
defn!(Indexiv(c: *const GLint) -> ());
defn!(Indexs(c: GLshort) -> ());
defn!(Indexsv(c: *const GLshort) -> ());
defn!(Indexub(c: GLubyte) -> ());
defn!(Indexubv(c: *const GLubyte) -> ());
defn!(InitNames() -> ());
defn!(InterleavedArrays(format: GLenum, stride: GLsizei, pointer: *const c_void) -> ());
defn!(InvalidateBufferData(buffer: GLuint) -> ());
defn!(InvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> ());
defn!(InvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum) -> ());
defn!(InvalidateNamedFramebufferData(framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum) -> ());
defn!(InvalidateNamedFramebufferSubData(framebuffer: GLuint, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> ());
defn!(InvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *const GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> ());
defn!(InvalidateTexImage(texture: GLuint, level: GLint) -> ());
defn!(InvalidateTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> ());
defn!(IsBuffer(buffer: GLuint) -> GLboolean, IsBufferARB);
defn!(IsEnabled(cap: GLenum) -> GLboolean);
defn!(IsEnabledi(target: GLenum, index: GLuint) -> GLboolean, IsEnablediOES);
defn!(IsFramebuffer(framebuffer: GLuint) -> GLboolean, IsFramebufferEXT);
defn!(IsList(list: GLuint) -> GLboolean);
defn!(IsProgram(program: GLuint) -> GLboolean);
defn!(IsProgramPipeline(pipeline: GLuint) -> GLboolean);
defn!(IsQuery(id: GLuint) -> GLboolean, IsQueryARB);
defn!(IsRenderbuffer(renderbuffer: GLuint) -> GLboolean, IsRenderbufferEXT);
defn!(IsSampler(sampler: GLuint) -> GLboolean);
defn!(IsShader(shader: GLuint) -> GLboolean);
defn!(IsSync(sync: GLsync) -> GLboolean, IsSyncAPPLE);
defn!(IsTexture(texture: GLuint) -> GLboolean);
defn!(IsTransformFeedback(id: GLuint) -> GLboolean, IsTransformFeedbackNV);
defn!(IsVertexArray(array: GLuint) -> GLboolean, IsVertexArrayOES);
defn!(LightModelf(pname: GLenum, param: GLfloat) -> ());
defn!(LightModelfv(pname: GLenum, params: *const GLfloat) -> ());
defn!(LightModeli(pname: GLenum, param: GLint) -> ());
defn!(LightModeliv(pname: GLenum, params: *const GLint) -> ());
defn!(Lightf(light: GLenum, pname: GLenum, param: GLfloat) -> ());
defn!(Lightfv(light: GLenum, pname: GLenum, params: *const GLfloat) -> ());
defn!(Lighti(light: GLenum, pname: GLenum, param: GLint) -> ());
defn!(Lightiv(light: GLenum, pname: GLenum, params: *const GLint) -> ());
defn!(LineStipple(factor: GLint, pattern: GLushort) -> ());
defn!(LineWidth(width: GLfloat) -> ());
defn!(LinkProgram(program: GLuint) -> (), LinkProgramARB);
defn!(ListBase(base: GLuint) -> ());
defn!(LoadIdentity() -> ());
defn!(LoadMatrixd(m: *const GLdouble) -> ());
defn!(LoadMatrixf(m: *const GLfloat) -> ());
defn!(LoadName(name: GLuint) -> ());
defn!(LoadTransposeMatrixd(m: *const GLdouble) -> (), LoadTransposeMatrixdARB);
defn!(LoadTransposeMatrixf(m: *const GLfloat) -> (), LoadTransposeMatrixfARB);
defn!(LogicOp(opcode: GLenum) -> ());
defn!(Map1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *const GLdouble) -> ());
defn!(Map1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *const GLfloat) -> ());
defn!(Map2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *const GLdouble) -> ());
defn!(Map2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *const GLfloat) -> ());
defn!(MapBuffer(target: GLenum, access: GLenum) -> *mut c_void, MapBufferOES);
defn!(MapBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *mut c_void, MapBufferRangeEXT);
defn!(MapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) -> ());
defn!(MapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) -> ());
defn!(MapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> ());
defn!(MapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> ());
defn!(MapNamedBuffer(buffer: GLuint, access: GLenum) -> *mut c_void);
defn!(MapNamedBufferRange(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *mut c_void);
defn!(Materialf(face: GLenum, pname: GLenum, param: GLfloat) -> ());
defn!(Materialfv(face: GLenum, pname: GLenum, params: *const GLfloat) -> ());
defn!(Materiali(face: GLenum, pname: GLenum, param: GLint) -> ());
defn!(Materialiv(face: GLenum, pname: GLenum, params: *const GLint) -> ());
defn!(MatrixMode(mode: GLenum) -> ());
defn!(MemoryBarrier(barriers: GLbitfield) -> (), MemoryBarrierEXT);
defn!(MemoryBarrierByRegion(barriers: GLbitfield) -> ());
defn!(MinSampleShading(value: GLfloat) -> (), MinSampleShadingOES);
defn!(MultMatrixd(m: *const GLdouble) -> ());
defn!(MultMatrixf(m: *const GLfloat) -> ());
defn!(MultTransposeMatrixd(m: *const GLdouble) -> (), MultTransposeMatrixdARB);
defn!(MultTransposeMatrixf(m: *const GLfloat) -> (), MultTransposeMatrixfARB);
defn!(MultiDrawArrays(mode: GLenum, first: *const GLint, count: *const GLsizei, drawcount: GLsizei) -> (), MultiDrawArraysEXT);
defn!(MultiDrawArraysIndirect(mode: GLenum, indirect: *const c_void, drawcount: GLsizei, stride: GLsizei) -> (), MultiDrawArraysIndirectEXT);
defn!(MultiDrawElements(mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const c_void, drawcount: GLsizei) -> (), MultiDrawElementsEXT);
defn!(MultiDrawElementsBaseVertex(mode: GLenum, count: *const GLsizei, type_: GLenum, indices: *const *const c_void, drawcount: GLsizei, basevertex: *const GLint) -> (), MultiDrawElementsBaseVertexEXT);
defn!(MultiDrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *const c_void, drawcount: GLsizei, stride: GLsizei) -> (), MultiDrawElementsIndirectEXT);
defn!(MultiTexCoord1d(target: GLenum, s: GLdouble) -> (), MultiTexCoord1dARB);
defn!(MultiTexCoord1dv(target: GLenum, v: *const GLdouble) -> (), MultiTexCoord1dvARB);
defn!(MultiTexCoord1f(target: GLenum, s: GLfloat) -> (), MultiTexCoord1fARB);
defn!(MultiTexCoord1fv(target: GLenum, v: *const GLfloat) -> (), MultiTexCoord1fvARB);
defn!(MultiTexCoord1i(target: GLenum, s: GLint) -> (), MultiTexCoord1iARB);
defn!(MultiTexCoord1iv(target: GLenum, v: *const GLint) -> (), MultiTexCoord1ivARB);
defn!(MultiTexCoord1s(target: GLenum, s: GLshort) -> (), MultiTexCoord1sARB);
defn!(MultiTexCoord1sv(target: GLenum, v: *const GLshort) -> (), MultiTexCoord1svARB);
defn!(MultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) -> (), MultiTexCoord2dARB);
defn!(MultiTexCoord2dv(target: GLenum, v: *const GLdouble) -> (), MultiTexCoord2dvARB);
defn!(MultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) -> (), MultiTexCoord2fARB);
defn!(MultiTexCoord2fv(target: GLenum, v: *const GLfloat) -> (), MultiTexCoord2fvARB);
defn!(MultiTexCoord2i(target: GLenum, s: GLint, t: GLint) -> (), MultiTexCoord2iARB);
defn!(MultiTexCoord2iv(target: GLenum, v: *const GLint) -> (), MultiTexCoord2ivARB);
defn!(MultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) -> (), MultiTexCoord2sARB);
defn!(MultiTexCoord2sv(target: GLenum, v: *const GLshort) -> (), MultiTexCoord2svARB);
defn!(MultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> (), MultiTexCoord3dARB);
defn!(MultiTexCoord3dv(target: GLenum, v: *const GLdouble) -> (), MultiTexCoord3dvARB);
defn!(MultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> (), MultiTexCoord3fARB);
defn!(MultiTexCoord3fv(target: GLenum, v: *const GLfloat) -> (), MultiTexCoord3fvARB);
defn!(MultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) -> (), MultiTexCoord3iARB);
defn!(MultiTexCoord3iv(target: GLenum, v: *const GLint) -> (), MultiTexCoord3ivARB);
defn!(MultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> (), MultiTexCoord3sARB);
defn!(MultiTexCoord3sv(target: GLenum, v: *const GLshort) -> (), MultiTexCoord3svARB);
defn!(MultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> (), MultiTexCoord4dARB);
defn!(MultiTexCoord4dv(target: GLenum, v: *const GLdouble) -> (), MultiTexCoord4dvARB);
defn!(MultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> (), MultiTexCoord4fARB);
defn!(MultiTexCoord4fv(target: GLenum, v: *const GLfloat) -> (), MultiTexCoord4fvARB);
defn!(MultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> (), MultiTexCoord4iARB);
defn!(MultiTexCoord4iv(target: GLenum, v: *const GLint) -> (), MultiTexCoord4ivARB);
defn!(MultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> (), MultiTexCoord4sARB);
defn!(MultiTexCoord4sv(target: GLenum, v: *const GLshort) -> (), MultiTexCoord4svARB);
defn!(MultiTexCoordP1ui(texture: GLenum, type_: GLenum, coords: GLuint) -> ());
defn!(MultiTexCoordP1uiv(texture: GLenum, type_: GLenum, coords: *const GLuint) -> ());
defn!(MultiTexCoordP2ui(texture: GLenum, type_: GLenum, coords: GLuint) -> ());
defn!(MultiTexCoordP2uiv(texture: GLenum, type_: GLenum, coords: *const GLuint) -> ());
defn!(MultiTexCoordP3ui(texture: GLenum, type_: GLenum, coords: GLuint) -> ());
defn!(MultiTexCoordP3uiv(texture: GLenum, type_: GLenum, coords: *const GLuint) -> ());
defn!(MultiTexCoordP4ui(texture: GLenum, type_: GLenum, coords: GLuint) -> ());
defn!(MultiTexCoordP4uiv(texture: GLenum, type_: GLenum, coords: *const GLuint) -> ());
defn!(NamedBufferData(buffer: GLuint, size: GLsizeiptr, data: *const c_void, usage: GLenum) -> ());
defn!(NamedBufferStorage(buffer: GLuint, size: GLsizeiptr, data: *const c_void, flags: GLbitfield) -> (), NamedBufferStorageEXT);
defn!(NamedBufferSubData(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *const c_void) -> (), NamedBufferSubDataEXT);
defn!(NamedFramebufferDrawBuffer(framebuffer: GLuint, buf: GLenum) -> ());
defn!(NamedFramebufferDrawBuffers(framebuffer: GLuint, n: GLsizei, bufs: *const GLenum) -> ());
defn!(NamedFramebufferParameteri(framebuffer: GLuint, pname: GLenum, param: GLint) -> ());
defn!(NamedFramebufferReadBuffer(framebuffer: GLuint, src: GLenum) -> ());
defn!(NamedFramebufferRenderbuffer(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> ());
defn!(NamedFramebufferTexture(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> ());
defn!(NamedFramebufferTextureLayer(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> ());
defn!(NamedRenderbufferStorage(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> ());
defn!(NamedRenderbufferStorageMultisample(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> ());
defn!(NewList(list: GLuint, mode: GLenum) -> ());
defn!(Normal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> ());
defn!(Normal3bv(v: *const GLbyte) -> ());
defn!(Normal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> ());
defn!(Normal3dv(v: *const GLdouble) -> ());
defn!(Normal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> ());
defn!(Normal3fv(v: *const GLfloat) -> ());
defn!(Normal3i(nx: GLint, ny: GLint, nz: GLint) -> ());
defn!(Normal3iv(v: *const GLint) -> ());
defn!(Normal3s(nx: GLshort, ny: GLshort, nz: GLshort) -> ());
defn!(Normal3sv(v: *const GLshort) -> ());
defn!(NormalP3ui(type_: GLenum, coords: GLuint) -> ());
defn!(NormalP3uiv(type_: GLenum, coords: *const GLuint) -> ());
defn!(NormalPointer(type_: GLenum, stride: GLsizei, pointer: *const c_void) -> ());
defn!(ObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: *const GLchar) -> (), ObjectLabelKHR);
defn!(ObjectPtrLabel(ptr: *const c_void, length: GLsizei, label: *const GLchar) -> (), ObjectPtrLabelKHR);
defn!(Ortho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> ());
defn!(PassThrough(token: GLfloat) -> ());
defn!(PatchParameterfv(pname: GLenum, values: *const GLfloat) -> ());
defn!(PatchParameteri(pname: GLenum, value: GLint) -> (), PatchParameteriOES);
defn!(PauseTransformFeedback() -> (), PauseTransformFeedbackNV);
defn!(PixelMapfv(map: GLenum, mapsize: GLsizei, values: *const GLfloat) -> ());
defn!(PixelMapuiv(map: GLenum, mapsize: GLsizei, values: *const GLuint) -> ());
defn!(PixelMapusv(map: GLenum, mapsize: GLsizei, values: *const GLushort) -> ());
defn!(PixelStoref(pname: GLenum, param: GLfloat) -> ());
defn!(PixelStorei(pname: GLenum, param: GLint) -> ());
defn!(PixelTransferf(pname: GLenum, param: GLfloat) -> ());
defn!(PixelTransferi(pname: GLenum, param: GLint) -> ());
defn!(PixelZoom(xfactor: GLfloat, yfactor: GLfloat) -> ());
defn!(PointParameterf(pname: GLenum, param: GLfloat) -> (), PointParameterfSGIS);
defn!(PointParameterfv(pname: GLenum, params: *const GLfloat) -> (), PointParameterfvSGIS);
defn!(PointParameteri(pname: GLenum, param: GLint) -> (), PointParameteriNV);
defn!(PointParameteriv(pname: GLenum, params: *const GLint) -> (), PointParameterivNV);
defn!(PointSize(size: GLfloat) -> ());
defn!(PolygonMode(face: GLenum, mode: GLenum) -> (), PolygonModeNV);
defn!(PolygonOffset(factor: GLfloat, units: GLfloat) -> ());
defn!(PolygonStipple(mask: *const GLubyte) -> ());
defn!(PopAttrib() -> ());
defn!(PopClientAttrib() -> ());
defn!(PopDebugGroup() -> (), PopDebugGroupKHR);
defn!(PopMatrix() -> ());
defn!(PopName() -> ());
defn!(PrimitiveRestartIndex(index: GLuint) -> ());
defn!(PrioritizeTextures(n: GLsizei, textures: *const GLuint, priorities: *const GLfloat) -> (), PrioritizeTexturesEXT);
defn!(ProgramBinary(program: GLuint, binaryFormat: GLenum, binary: *const c_void, length: GLsizei) -> (), ProgramBinaryOES);
defn!(ProgramParameteri(program: GLuint, pname: GLenum, value: GLint) -> (), ProgramParameteriEXT);
defn!(ProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble) -> ());
defn!(ProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> ());
defn!(ProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat) -> (), ProgramUniform1fEXT);
defn!(ProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> (), ProgramUniform1fvEXT);
defn!(ProgramUniform1i(program: GLuint, location: GLint, v0: GLint) -> (), ProgramUniform1iEXT);
defn!(ProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> (), ProgramUniform1ivEXT);
defn!(ProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint) -> (), ProgramUniform1uiEXT);
defn!(ProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> (), ProgramUniform1uivEXT);
defn!(ProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> ());
defn!(ProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> ());
defn!(ProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> (), ProgramUniform2fEXT);
defn!(ProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> (), ProgramUniform2fvEXT);
defn!(ProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> (), ProgramUniform2iEXT);
defn!(ProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> (), ProgramUniform2ivEXT);
defn!(ProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> (), ProgramUniform2uiEXT);
defn!(ProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> (), ProgramUniform2uivEXT);
defn!(ProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> ());
defn!(ProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> ());
defn!(ProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> (), ProgramUniform3fEXT);
defn!(ProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> (), ProgramUniform3fvEXT);
defn!(ProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> (), ProgramUniform3iEXT);
defn!(ProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> (), ProgramUniform3ivEXT);
defn!(ProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> (), ProgramUniform3uiEXT);
defn!(ProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> (), ProgramUniform3uivEXT);
defn!(ProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> ());
defn!(ProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: *const GLdouble) -> ());
defn!(ProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> (), ProgramUniform4fEXT);
defn!(ProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: *const GLfloat) -> (), ProgramUniform4fvEXT);
defn!(ProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> (), ProgramUniform4iEXT);
defn!(ProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: *const GLint) -> (), ProgramUniform4ivEXT);
defn!(ProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> (), ProgramUniform4uiEXT);
defn!(ProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: *const GLuint) -> (), ProgramUniform4uivEXT);
defn!(ProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix2fvEXT);
defn!(ProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix2x3fvEXT);
defn!(ProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix2x4fvEXT);
defn!(ProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix3fvEXT);
defn!(ProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix3x2fvEXT);
defn!(ProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix3x4fvEXT);
defn!(ProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix4fvEXT);
defn!(ProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix4x2fvEXT);
defn!(ProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(ProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), ProgramUniformMatrix4x3fvEXT);
defn!(ProvokingVertex(mode: GLenum) -> (), ProvokingVertexEXT);
defn!(PushAttrib(mask: GLbitfield) -> ());
defn!(PushClientAttrib(mask: GLbitfield) -> ());
defn!(PushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: *const GLchar) -> (), PushDebugGroupKHR);
defn!(PushMatrix() -> ());
defn!(PushName(name: GLuint) -> ());
defn!(QueryCounter(id: GLuint, target: GLenum) -> (), QueryCounterEXT);
defn!(RasterPos2d(x: GLdouble, y: GLdouble) -> ());
defn!(RasterPos2dv(v: *const GLdouble) -> ());
defn!(RasterPos2f(x: GLfloat, y: GLfloat) -> ());
defn!(RasterPos2fv(v: *const GLfloat) -> ());
defn!(RasterPos2i(x: GLint, y: GLint) -> ());
defn!(RasterPos2iv(v: *const GLint) -> ());
defn!(RasterPos2s(x: GLshort, y: GLshort) -> ());
defn!(RasterPos2sv(v: *const GLshort) -> ());
defn!(RasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> ());
defn!(RasterPos3dv(v: *const GLdouble) -> ());
defn!(RasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> ());
defn!(RasterPos3fv(v: *const GLfloat) -> ());
defn!(RasterPos3i(x: GLint, y: GLint, z: GLint) -> ());
defn!(RasterPos3iv(v: *const GLint) -> ());
defn!(RasterPos3s(x: GLshort, y: GLshort, z: GLshort) -> ());
defn!(RasterPos3sv(v: *const GLshort) -> ());
defn!(RasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> ());
defn!(RasterPos4dv(v: *const GLdouble) -> ());
defn!(RasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> ());
defn!(RasterPos4fv(v: *const GLfloat) -> ());
defn!(RasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) -> ());
defn!(RasterPos4iv(v: *const GLint) -> ());
defn!(RasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> ());
defn!(RasterPos4sv(v: *const GLshort) -> ());
defn!(ReadBuffer(src: GLenum) -> ());
defn!(ReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *mut c_void) -> ());
defn!(ReadnPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *mut c_void) -> (), ReadnPixelsKHR);
defn!(Rectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> ());
defn!(Rectdv(v1: *const GLdouble, v2: *const GLdouble) -> ());
defn!(Rectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> ());
defn!(Rectfv(v1: *const GLfloat, v2: *const GLfloat) -> ());
defn!(Recti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> ());
defn!(Rectiv(v1: *const GLint, v2: *const GLint) -> ());
defn!(Rects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> ());
defn!(Rectsv(v1: *const GLshort, v2: *const GLshort) -> ());
defn!(ReleaseShaderCompiler() -> ());
defn!(RenderMode(mode: GLenum) -> GLint);
defn!(RenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> (), RenderbufferStorageEXT);
defn!(RenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> (), RenderbufferStorageMultisampleNV);
defn!(ResumeTransformFeedback() -> (), ResumeTransformFeedbackNV);
defn!(Rotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> ());
defn!(Rotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> ());
defn!(SampleCoverage(value: GLfloat, invert: GLboolean) -> (), SampleCoverageARB);
defn!(SampleMaski(maskNumber: GLuint, mask: GLbitfield) -> ());
defn!(SamplerParameterIiv(sampler: GLuint, pname: GLenum, param: *const GLint) -> (), SamplerParameterIivOES);
defn!(SamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: *const GLuint) -> (), SamplerParameterIuivOES);
defn!(SamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat) -> ());
defn!(SamplerParameterfv(sampler: GLuint, pname: GLenum, param: *const GLfloat) -> ());
defn!(SamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint) -> ());
defn!(SamplerParameteriv(sampler: GLuint, pname: GLenum, param: *const GLint) -> ());
defn!(Scaled(x: GLdouble, y: GLdouble, z: GLdouble) -> ());
defn!(Scalef(x: GLfloat, y: GLfloat, z: GLfloat) -> ());
defn!(Scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> ());
defn!(ScissorArrayv(first: GLuint, count: GLsizei, v: *const GLint) -> (), ScissorArrayvOES);
defn!(ScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> (), ScissorIndexedOES);
defn!(ScissorIndexedv(index: GLuint, v: *const GLint) -> (), ScissorIndexedvOES);
defn!(SecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> (), SecondaryColor3bEXT);
defn!(SecondaryColor3bv(v: *const GLbyte) -> (), SecondaryColor3bvEXT);
defn!(SecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> (), SecondaryColor3dEXT);
defn!(SecondaryColor3dv(v: *const GLdouble) -> (), SecondaryColor3dvEXT);
defn!(SecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> (), SecondaryColor3fEXT);
defn!(SecondaryColor3fv(v: *const GLfloat) -> (), SecondaryColor3fvEXT);
defn!(SecondaryColor3i(red: GLint, green: GLint, blue: GLint) -> (), SecondaryColor3iEXT);
defn!(SecondaryColor3iv(v: *const GLint) -> (), SecondaryColor3ivEXT);
defn!(SecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort) -> (), SecondaryColor3sEXT);
defn!(SecondaryColor3sv(v: *const GLshort) -> (), SecondaryColor3svEXT);
defn!(SecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> (), SecondaryColor3ubEXT);
defn!(SecondaryColor3ubv(v: *const GLubyte) -> (), SecondaryColor3ubvEXT);
defn!(SecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> (), SecondaryColor3uiEXT);
defn!(SecondaryColor3uiv(v: *const GLuint) -> (), SecondaryColor3uivEXT);
defn!(SecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort) -> (), SecondaryColor3usEXT);
defn!(SecondaryColor3usv(v: *const GLushort) -> (), SecondaryColor3usvEXT);
defn!(SecondaryColorP3ui(type_: GLenum, color: GLuint) -> ());
defn!(SecondaryColorP3uiv(type_: GLenum, color: *const GLuint) -> ());
defn!(SecondaryColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) -> (), SecondaryColorPointerEXT);
defn!(SelectBuffer(size: GLsizei, buffer: *mut GLuint) -> ());
defn!(ShadeModel(mode: GLenum) -> ());
defn!(ShaderBinary(count: GLsizei, shaders: *const GLuint, binaryformat: GLenum, binary: *const c_void, length: GLsizei) -> ());
defn!(ShaderSource(shader: GLuint, count: GLsizei, string: *const *const GLchar, length: *const GLint) -> (), ShaderSourceARB);
defn!(ShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> ());
defn!(StencilFunc(func: GLenum, ref_: GLint, mask: GLuint) -> ());
defn!(StencilFuncSeparate(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint) -> ());
defn!(StencilMask(mask: GLuint) -> ());
defn!(StencilMaskSeparate(face: GLenum, mask: GLuint) -> ());
defn!(StencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) -> ());
defn!(StencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> (), StencilOpSeparateATI);
defn!(TexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint) -> (), TexBufferOES);
defn!(TexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> (), TexBufferRangeOES);
defn!(TexCoord1d(s: GLdouble) -> ());
defn!(TexCoord1dv(v: *const GLdouble) -> ());
defn!(TexCoord1f(s: GLfloat) -> ());
defn!(TexCoord1fv(v: *const GLfloat) -> ());
defn!(TexCoord1i(s: GLint) -> ());
defn!(TexCoord1iv(v: *const GLint) -> ());
defn!(TexCoord1s(s: GLshort) -> ());
defn!(TexCoord1sv(v: *const GLshort) -> ());
defn!(TexCoord2d(s: GLdouble, t: GLdouble) -> ());
defn!(TexCoord2dv(v: *const GLdouble) -> ());
defn!(TexCoord2f(s: GLfloat, t: GLfloat) -> ());
defn!(TexCoord2fv(v: *const GLfloat) -> ());
defn!(TexCoord2i(s: GLint, t: GLint) -> ());
defn!(TexCoord2iv(v: *const GLint) -> ());
defn!(TexCoord2s(s: GLshort, t: GLshort) -> ());
defn!(TexCoord2sv(v: *const GLshort) -> ());
defn!(TexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) -> ());
defn!(TexCoord3dv(v: *const GLdouble) -> ());
defn!(TexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) -> ());
defn!(TexCoord3fv(v: *const GLfloat) -> ());
defn!(TexCoord3i(s: GLint, t: GLint, r: GLint) -> ());
defn!(TexCoord3iv(v: *const GLint) -> ());
defn!(TexCoord3s(s: GLshort, t: GLshort, r: GLshort) -> ());
defn!(TexCoord3sv(v: *const GLshort) -> ());
defn!(TexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> ());
defn!(TexCoord4dv(v: *const GLdouble) -> ());
defn!(TexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> ());
defn!(TexCoord4fv(v: *const GLfloat) -> ());
defn!(TexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) -> ());
defn!(TexCoord4iv(v: *const GLint) -> ());
defn!(TexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> ());
defn!(TexCoord4sv(v: *const GLshort) -> ());
defn!(TexCoordP1ui(type_: GLenum, coords: GLuint) -> ());
defn!(TexCoordP1uiv(type_: GLenum, coords: *const GLuint) -> ());
defn!(TexCoordP2ui(type_: GLenum, coords: GLuint) -> ());
defn!(TexCoordP2uiv(type_: GLenum, coords: *const GLuint) -> ());
defn!(TexCoordP3ui(type_: GLenum, coords: GLuint) -> ());
defn!(TexCoordP3uiv(type_: GLenum, coords: *const GLuint) -> ());
defn!(TexCoordP4ui(type_: GLenum, coords: GLuint) -> ());
defn!(TexCoordP4uiv(type_: GLenum, coords: *const GLuint) -> ());
defn!(TexCoordPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) -> ());
defn!(TexEnvf(target: GLenum, pname: GLenum, param: GLfloat) -> ());
defn!(TexEnvfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> ());
defn!(TexEnvi(target: GLenum, pname: GLenum, param: GLint) -> ());
defn!(TexEnviv(target: GLenum, pname: GLenum, params: *const GLint) -> ());
defn!(TexGend(coord: GLenum, pname: GLenum, param: GLdouble) -> ());
defn!(TexGendv(coord: GLenum, pname: GLenum, params: *const GLdouble) -> ());
defn!(TexGenf(coord: GLenum, pname: GLenum, param: GLfloat) -> ());
defn!(TexGenfv(coord: GLenum, pname: GLenum, params: *const GLfloat) -> ());
defn!(TexGeni(coord: GLenum, pname: GLenum, param: GLint) -> ());
defn!(TexGeniv(coord: GLenum, pname: GLenum, params: *const GLint) -> ());
defn!(TexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) -> ());
defn!(TexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) -> ());
defn!(TexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> ());
defn!(TexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const c_void) -> (), TexImage3DEXT);
defn!(TexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> ());
defn!(TexParameterIiv(target: GLenum, pname: GLenum, params: *const GLint) -> (), TexParameterIivOES);
defn!(TexParameterIuiv(target: GLenum, pname: GLenum, params: *const GLuint) -> (), TexParameterIuivOES);
defn!(TexParameterf(target: GLenum, pname: GLenum, param: GLfloat) -> ());
defn!(TexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat) -> ());
defn!(TexParameteri(target: GLenum, pname: GLenum, param: GLint) -> ());
defn!(TexParameteriv(target: GLenum, pname: GLenum, params: *const GLint) -> ());
defn!(TexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> (), TexStorage1DEXT);
defn!(TexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> (), TexStorage2DEXT);
defn!(TexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> ());
defn!(TexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> (), TexStorage3DEXT);
defn!(TexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> (), TexStorage3DMultisampleOES);
defn!(TexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) -> (), TexSubImage1DEXT);
defn!(TexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) -> (), TexSubImage2DEXT);
defn!(TexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) -> (), TexSubImage3DEXT);
defn!(TextureBarrier() -> ());
defn!(TextureBuffer(texture: GLuint, internalformat: GLenum, buffer: GLuint) -> ());
defn!(TextureBufferRange(texture: GLuint, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> ());
defn!(TextureParameterIiv(texture: GLuint, pname: GLenum, params: *const GLint) -> ());
defn!(TextureParameterIuiv(texture: GLuint, pname: GLenum, params: *const GLuint) -> ());
defn!(TextureParameterf(texture: GLuint, pname: GLenum, param: GLfloat) -> ());
defn!(TextureParameterfv(texture: GLuint, pname: GLenum, param: *const GLfloat) -> ());
defn!(TextureParameteri(texture: GLuint, pname: GLenum, param: GLint) -> ());
defn!(TextureParameteriv(texture: GLuint, pname: GLenum, param: *const GLint) -> ());
defn!(TextureStorage1D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> ());
defn!(TextureStorage2D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> ());
defn!(TextureStorage2DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> ());
defn!(TextureStorage3D(texture: GLuint, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> ());
defn!(TextureStorage3DMultisample(texture: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> ());
defn!(TextureSubImage1D(texture: GLuint, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) -> ());
defn!(TextureSubImage2D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) -> ());
defn!(TextureSubImage3D(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *const c_void) -> ());
defn!(TextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> (), TextureViewOES);
defn!(TransformFeedbackBufferBase(xfb: GLuint, index: GLuint, buffer: GLuint) -> ());
defn!(TransformFeedbackBufferRange(xfb: GLuint, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> ());
defn!(TransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: *const *const GLchar, bufferMode: GLenum) -> (), TransformFeedbackVaryingsEXT);
defn!(Translated(x: GLdouble, y: GLdouble, z: GLdouble) -> ());
defn!(Translatef(x: GLfloat, y: GLfloat, z: GLfloat) -> ());
defn!(Uniform1d(location: GLint, x: GLdouble) -> ());
defn!(Uniform1dv(location: GLint, count: GLsizei, value: *const GLdouble) -> ());
defn!(Uniform1f(location: GLint, v0: GLfloat) -> (), Uniform1fARB);
defn!(Uniform1fv(location: GLint, count: GLsizei, value: *const GLfloat) -> (), Uniform1fvARB);
defn!(Uniform1i(location: GLint, v0: GLint) -> (), Uniform1iARB);
defn!(Uniform1iv(location: GLint, count: GLsizei, value: *const GLint) -> (), Uniform1ivARB);
defn!(Uniform1ui(location: GLint, v0: GLuint) -> (), Uniform1uiEXT);
defn!(Uniform1uiv(location: GLint, count: GLsizei, value: *const GLuint) -> (), Uniform1uivEXT);
defn!(Uniform2d(location: GLint, x: GLdouble, y: GLdouble) -> ());
defn!(Uniform2dv(location: GLint, count: GLsizei, value: *const GLdouble) -> ());
defn!(Uniform2f(location: GLint, v0: GLfloat, v1: GLfloat) -> (), Uniform2fARB);
defn!(Uniform2fv(location: GLint, count: GLsizei, value: *const GLfloat) -> (), Uniform2fvARB);
defn!(Uniform2i(location: GLint, v0: GLint, v1: GLint) -> (), Uniform2iARB);
defn!(Uniform2iv(location: GLint, count: GLsizei, value: *const GLint) -> (), Uniform2ivARB);
defn!(Uniform2ui(location: GLint, v0: GLuint, v1: GLuint) -> (), Uniform2uiEXT);
defn!(Uniform2uiv(location: GLint, count: GLsizei, value: *const GLuint) -> (), Uniform2uivEXT);
defn!(Uniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> ());
defn!(Uniform3dv(location: GLint, count: GLsizei, value: *const GLdouble) -> ());
defn!(Uniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> (), Uniform3fARB);
defn!(Uniform3fv(location: GLint, count: GLsizei, value: *const GLfloat) -> (), Uniform3fvARB);
defn!(Uniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> (), Uniform3iARB);
defn!(Uniform3iv(location: GLint, count: GLsizei, value: *const GLint) -> (), Uniform3ivARB);
defn!(Uniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> (), Uniform3uiEXT);
defn!(Uniform3uiv(location: GLint, count: GLsizei, value: *const GLuint) -> (), Uniform3uivEXT);
defn!(Uniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> ());
defn!(Uniform4dv(location: GLint, count: GLsizei, value: *const GLdouble) -> ());
defn!(Uniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> (), Uniform4fARB);
defn!(Uniform4fv(location: GLint, count: GLsizei, value: *const GLfloat) -> (), Uniform4fvARB);
defn!(Uniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> (), Uniform4iARB);
defn!(Uniform4iv(location: GLint, count: GLsizei, value: *const GLint) -> (), Uniform4ivARB);
defn!(Uniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> (), Uniform4uiEXT);
defn!(Uniform4uiv(location: GLint, count: GLsizei, value: *const GLuint) -> (), Uniform4uivEXT);
defn!(UniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> ());
defn!(UniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix2fvARB);
defn!(UniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix2x3fvNV);
defn!(UniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix2x4fvNV);
defn!(UniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix3fvARB);
defn!(UniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix3x2fvNV);
defn!(UniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix3x4fvNV);
defn!(UniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix4fvARB);
defn!(UniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix4x2fvNV);
defn!(UniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLdouble) -> ());
defn!(UniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *const GLfloat) -> (), UniformMatrix4x3fvNV);
defn!(UniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: *const GLuint) -> ());
defn!(UnmapBuffer(target: GLenum) -> GLboolean, UnmapBufferOES);
defn!(UnmapNamedBuffer(buffer: GLuint) -> GLboolean);
defn!(UseProgram(program: GLuint) -> (), UseProgramObjectARB);
defn!(UseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> ());
defn!(ValidateProgram(program: GLuint) -> (), ValidateProgramARB);
defn!(ValidateProgramPipeline(pipeline: GLuint) -> ());
defn!(Vertex2d(x: GLdouble, y: GLdouble) -> ());
defn!(Vertex2dv(v: *const GLdouble) -> ());
defn!(Vertex2f(x: GLfloat, y: GLfloat) -> ());
defn!(Vertex2fv(v: *const GLfloat) -> ());
defn!(Vertex2i(x: GLint, y: GLint) -> ());
defn!(Vertex2iv(v: *const GLint) -> ());
defn!(Vertex2s(x: GLshort, y: GLshort) -> ());
defn!(Vertex2sv(v: *const GLshort) -> ());
defn!(Vertex3d(x: GLdouble, y: GLdouble, z: GLdouble) -> ());
defn!(Vertex3dv(v: *const GLdouble) -> ());
defn!(Vertex3f(x: GLfloat, y: GLfloat, z: GLfloat) -> ());
defn!(Vertex3fv(v: *const GLfloat) -> ());
defn!(Vertex3i(x: GLint, y: GLint, z: GLint) -> ());
defn!(Vertex3iv(v: *const GLint) -> ());
defn!(Vertex3s(x: GLshort, y: GLshort, z: GLshort) -> ());
defn!(Vertex3sv(v: *const GLshort) -> ());
defn!(Vertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> ());
defn!(Vertex4dv(v: *const GLdouble) -> ());
defn!(Vertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> ());
defn!(Vertex4fv(v: *const GLfloat) -> ());
defn!(Vertex4i(x: GLint, y: GLint, z: GLint, w: GLint) -> ());
defn!(Vertex4iv(v: *const GLint) -> ());
defn!(Vertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> ());
defn!(Vertex4sv(v: *const GLshort) -> ());
defn!(VertexArrayAttribBinding(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> ());
defn!(VertexArrayAttribFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> ());
defn!(VertexArrayAttribIFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> ());
defn!(VertexArrayAttribLFormat(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> ());
defn!(VertexArrayBindingDivisor(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> ());
defn!(VertexArrayElementBuffer(vaobj: GLuint, buffer: GLuint) -> ());
defn!(VertexArrayVertexBuffer(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> ());
defn!(VertexArrayVertexBuffers(vaobj: GLuint, first: GLuint, count: GLsizei, buffers: *const GLuint, offsets: *const GLintptr, strides: *const GLsizei) -> ());
defn!(VertexAttrib1d(index: GLuint, x: GLdouble) -> (), VertexAttrib1dNV);
defn!(VertexAttrib1dv(index: GLuint, v: *const GLdouble) -> (), VertexAttrib1dvNV);
defn!(VertexAttrib1f(index: GLuint, x: GLfloat) -> (), VertexAttrib1fNV);
defn!(VertexAttrib1fv(index: GLuint, v: *const GLfloat) -> (), VertexAttrib1fvNV);
defn!(VertexAttrib1s(index: GLuint, x: GLshort) -> (), VertexAttrib1sNV);
defn!(VertexAttrib1sv(index: GLuint, v: *const GLshort) -> (), VertexAttrib1svNV);
defn!(VertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble) -> (), VertexAttrib2dNV);
defn!(VertexAttrib2dv(index: GLuint, v: *const GLdouble) -> (), VertexAttrib2dvNV);
defn!(VertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) -> (), VertexAttrib2fNV);
defn!(VertexAttrib2fv(index: GLuint, v: *const GLfloat) -> (), VertexAttrib2fvNV);
defn!(VertexAttrib2s(index: GLuint, x: GLshort, y: GLshort) -> (), VertexAttrib2sNV);
defn!(VertexAttrib2sv(index: GLuint, v: *const GLshort) -> (), VertexAttrib2svNV);
defn!(VertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> (), VertexAttrib3dNV);
defn!(VertexAttrib3dv(index: GLuint, v: *const GLdouble) -> (), VertexAttrib3dvNV);
defn!(VertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> (), VertexAttrib3fNV);
defn!(VertexAttrib3fv(index: GLuint, v: *const GLfloat) -> (), VertexAttrib3fvNV);
defn!(VertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> (), VertexAttrib3sNV);
defn!(VertexAttrib3sv(index: GLuint, v: *const GLshort) -> (), VertexAttrib3svNV);
defn!(VertexAttrib4Nbv(index: GLuint, v: *const GLbyte) -> (), VertexAttrib4NbvARB);
defn!(VertexAttrib4Niv(index: GLuint, v: *const GLint) -> (), VertexAttrib4NivARB);
defn!(VertexAttrib4Nsv(index: GLuint, v: *const GLshort) -> (), VertexAttrib4NsvARB);
defn!(VertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> (), VertexAttrib4ubNV);
defn!(VertexAttrib4Nubv(index: GLuint, v: *const GLubyte) -> (), VertexAttrib4ubvNV);
defn!(VertexAttrib4Nuiv(index: GLuint, v: *const GLuint) -> (), VertexAttrib4NuivARB);
defn!(VertexAttrib4Nusv(index: GLuint, v: *const GLushort) -> (), VertexAttrib4NusvARB);
defn!(VertexAttrib4bv(index: GLuint, v: *const GLbyte) -> (), VertexAttrib4bvARB);
defn!(VertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> (), VertexAttrib4dNV);
defn!(VertexAttrib4dv(index: GLuint, v: *const GLdouble) -> (), VertexAttrib4dvNV);
defn!(VertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> (), VertexAttrib4fNV);
defn!(VertexAttrib4fv(index: GLuint, v: *const GLfloat) -> (), VertexAttrib4fvNV);
defn!(VertexAttrib4iv(index: GLuint, v: *const GLint) -> (), VertexAttrib4ivARB);
defn!(VertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> (), VertexAttrib4sNV);
defn!(VertexAttrib4sv(index: GLuint, v: *const GLshort) -> (), VertexAttrib4svNV);
defn!(VertexAttrib4ubv(index: GLuint, v: *const GLubyte) -> (), VertexAttrib4ubvARB);
defn!(VertexAttrib4uiv(index: GLuint, v: *const GLuint) -> (), VertexAttrib4uivARB);
defn!(VertexAttrib4usv(index: GLuint, v: *const GLushort) -> (), VertexAttrib4usvARB);
defn!(VertexAttribBinding(attribindex: GLuint, bindingindex: GLuint) -> ());
defn!(VertexAttribDivisor(index: GLuint, divisor: GLuint) -> (), VertexAttribDivisorNV);
defn!(VertexAttribFormat(attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> ());
defn!(VertexAttribI1i(index: GLuint, x: GLint) -> (), VertexAttribI1iEXT);
defn!(VertexAttribI1iv(index: GLuint, v: *const GLint) -> (), VertexAttribI1ivEXT);
defn!(VertexAttribI1ui(index: GLuint, x: GLuint) -> (), VertexAttribI1uiEXT);
defn!(VertexAttribI1uiv(index: GLuint, v: *const GLuint) -> (), VertexAttribI1uivEXT);
defn!(VertexAttribI2i(index: GLuint, x: GLint, y: GLint) -> (), VertexAttribI2iEXT);
defn!(VertexAttribI2iv(index: GLuint, v: *const GLint) -> (), VertexAttribI2ivEXT);
defn!(VertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint) -> (), VertexAttribI2uiEXT);
defn!(VertexAttribI2uiv(index: GLuint, v: *const GLuint) -> (), VertexAttribI2uivEXT);
defn!(VertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint) -> (), VertexAttribI3iEXT);
defn!(VertexAttribI3iv(index: GLuint, v: *const GLint) -> (), VertexAttribI3ivEXT);
defn!(VertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> (), VertexAttribI3uiEXT);
defn!(VertexAttribI3uiv(index: GLuint, v: *const GLuint) -> (), VertexAttribI3uivEXT);
defn!(VertexAttribI4bv(index: GLuint, v: *const GLbyte) -> (), VertexAttribI4bvEXT);
defn!(VertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> (), VertexAttribI4iEXT);
defn!(VertexAttribI4iv(index: GLuint, v: *const GLint) -> (), VertexAttribI4ivEXT);
defn!(VertexAttribI4sv(index: GLuint, v: *const GLshort) -> (), VertexAttribI4svEXT);
defn!(VertexAttribI4ubv(index: GLuint, v: *const GLubyte) -> (), VertexAttribI4ubvEXT);
defn!(VertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> (), VertexAttribI4uiEXT);
defn!(VertexAttribI4uiv(index: GLuint, v: *const GLuint) -> (), VertexAttribI4uivEXT);
defn!(VertexAttribI4usv(index: GLuint, v: *const GLushort) -> (), VertexAttribI4usvEXT);
defn!(VertexAttribIFormat(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> ());
defn!(VertexAttribIPointer(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) -> (), VertexAttribIPointerEXT);
defn!(VertexAttribL1d(index: GLuint, x: GLdouble) -> (), VertexAttribL1dEXT);
defn!(VertexAttribL1dv(index: GLuint, v: *const GLdouble) -> (), VertexAttribL1dvEXT);
defn!(VertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble) -> (), VertexAttribL2dEXT);
defn!(VertexAttribL2dv(index: GLuint, v: *const GLdouble) -> (), VertexAttribL2dvEXT);
defn!(VertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> (), VertexAttribL3dEXT);
defn!(VertexAttribL3dv(index: GLuint, v: *const GLdouble) -> (), VertexAttribL3dvEXT);
defn!(VertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> (), VertexAttribL4dEXT);
defn!(VertexAttribL4dv(index: GLuint, v: *const GLdouble) -> (), VertexAttribL4dvEXT);
defn!(VertexAttribLFormat(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> ());
defn!(VertexAttribLPointer(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) -> (), VertexAttribLPointerEXT);
defn!(VertexAttribP1ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> ());
defn!(VertexAttribP1uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) -> ());
defn!(VertexAttribP2ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> ());
defn!(VertexAttribP2uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) -> ());
defn!(VertexAttribP3ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> ());
defn!(VertexAttribP3uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) -> ());
defn!(VertexAttribP4ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> ());
defn!(VertexAttribP4uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *const GLuint) -> ());
defn!(VertexAttribPointer(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *const c_void) -> (), VertexAttribPointerARB);
defn!(VertexBindingDivisor(bindingindex: GLuint, divisor: GLuint) -> ());
defn!(VertexP2ui(type_: GLenum, value: GLuint) -> ());
defn!(VertexP2uiv(type_: GLenum, value: *const GLuint) -> ());
defn!(VertexP3ui(type_: GLenum, value: GLuint) -> ());
defn!(VertexP3uiv(type_: GLenum, value: *const GLuint) -> ());
defn!(VertexP4ui(type_: GLenum, value: GLuint) -> ());
defn!(VertexP4uiv(type_: GLenum, value: *const GLuint) -> ());
defn!(VertexPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const c_void) -> ());
defn!(Viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> ());
defn!(ViewportArrayv(first: GLuint, count: GLsizei, v: *const GLfloat) -> (), ViewportArrayvOES);
defn!(ViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> (), ViewportIndexedfNV);
defn!(ViewportIndexedfv(index: GLuint, v: *const GLfloat) -> (), ViewportIndexedfvNV);
defn!(WaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> (), WaitSyncAPPLE);
defn!(WindowPos2d(x: GLdouble, y: GLdouble) -> (), WindowPos2dMESA);
defn!(WindowPos2dv(v: *const GLdouble) -> (), WindowPos2dvMESA);
defn!(WindowPos2f(x: GLfloat, y: GLfloat) -> (), WindowPos2fMESA);
defn!(WindowPos2fv(v: *const GLfloat) -> (), WindowPos2fvMESA);
defn!(WindowPos2i(x: GLint, y: GLint) -> (), WindowPos2iMESA);
defn!(WindowPos2iv(v: *const GLint) -> (), WindowPos2ivMESA);
defn!(WindowPos2s(x: GLshort, y: GLshort) -> (), WindowPos2sMESA);
defn!(WindowPos2sv(v: *const GLshort) -> (), WindowPos2svMESA);
defn!(WindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> (), WindowPos3dMESA);
defn!(WindowPos3dv(v: *const GLdouble) -> (), WindowPos3dvMESA);
defn!(WindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> (), WindowPos3fMESA);
defn!(WindowPos3fv(v: *const GLfloat) -> (), WindowPos3fvMESA);
defn!(WindowPos3i(x: GLint, y: GLint, z: GLint) -> (), WindowPos3iMESA);
defn!(WindowPos3iv(v: *const GLint) -> (), WindowPos3ivMESA);
defn!(WindowPos3s(x: GLshort, y: GLshort, z: GLshort) -> (), WindowPos3sMESA);
defn!(WindowPos3sv(v: *const GLshort) -> (), WindowPos3svMESA);
#[allow(missing_copy_implementations)]
pub struct FnPtr {
    /// The function pointer that will be used when calling the function.
    f: *const c_void,
    /// True if the pointer points to a real function, false if points to a `panic!` fn.
    is_loaded: bool,
}

/// Load each OpenGL symbol using a custom load function. This allows for the
/// use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.
/// ~~~ignore
/// gl::load_with(|s| glfw.get_proc_address(s));
/// ~~~
#[allow(dead_code)]
pub fn load_with<F>(mut loadfn: F) where F: FnMut(&'static str) -> *const c_void {
    #[inline(never)]
    fn inner(loadfn: &mut dyn FnMut(&'static str) -> *const c_void) {
        Accum::load_with(&mut *loadfn);
        ActiveShaderProgram::load_with(&mut *loadfn);
        ActiveTexture::load_with(&mut *loadfn);
        AlphaFunc::load_with(&mut *loadfn);
        AreTexturesResident::load_with(&mut *loadfn);
        ArrayElement::load_with(&mut *loadfn);
        AttachShader::load_with(&mut *loadfn);
        Begin::load_with(&mut *loadfn);
        BeginConditionalRender::load_with(&mut *loadfn);
        BeginQuery::load_with(&mut *loadfn);
        BeginQueryIndexed::load_with(&mut *loadfn);
        BeginTransformFeedback::load_with(&mut *loadfn);
        BindAttribLocation::load_with(&mut *loadfn);
        BindBuffer::load_with(&mut *loadfn);
        BindBufferBase::load_with(&mut *loadfn);
        BindBufferRange::load_with(&mut *loadfn);
        BindBuffersBase::load_with(&mut *loadfn);
        BindBuffersRange::load_with(&mut *loadfn);
        BindFragDataLocation::load_with(&mut *loadfn);
        BindFragDataLocationIndexed::load_with(&mut *loadfn);
        BindFramebuffer::load_with(&mut *loadfn);
        BindImageTexture::load_with(&mut *loadfn);
        BindImageTextures::load_with(&mut *loadfn);
        BindProgramPipeline::load_with(&mut *loadfn);
        BindRenderbuffer::load_with(&mut *loadfn);
        BindSampler::load_with(&mut *loadfn);
        BindSamplers::load_with(&mut *loadfn);
        BindTexture::load_with(&mut *loadfn);
        BindTextureUnit::load_with(&mut *loadfn);
        BindTextures::load_with(&mut *loadfn);
        BindTransformFeedback::load_with(&mut *loadfn);
        BindVertexArray::load_with(&mut *loadfn);
        BindVertexBuffer::load_with(&mut *loadfn);
        BindVertexBuffers::load_with(&mut *loadfn);
        Bitmap::load_with(&mut *loadfn);
        BlendColor::load_with(&mut *loadfn);
        BlendEquation::load_with(&mut *loadfn);
        BlendEquationSeparate::load_with(&mut *loadfn);
        BlendEquationSeparatei::load_with(&mut *loadfn);
        BlendEquationi::load_with(&mut *loadfn);
        BlendFunc::load_with(&mut *loadfn);
        BlendFuncSeparate::load_with(&mut *loadfn);
        BlendFuncSeparatei::load_with(&mut *loadfn);
        BlendFunci::load_with(&mut *loadfn);
        BlitFramebuffer::load_with(&mut *loadfn);
        BlitNamedFramebuffer::load_with(&mut *loadfn);
        BufferData::load_with(&mut *loadfn);
        BufferStorage::load_with(&mut *loadfn);
        BufferSubData::load_with(&mut *loadfn);
        CallList::load_with(&mut *loadfn);
        CallLists::load_with(&mut *loadfn);
        CheckFramebufferStatus::load_with(&mut *loadfn);
        CheckNamedFramebufferStatus::load_with(&mut *loadfn);
        ClampColor::load_with(&mut *loadfn);
        Clear::load_with(&mut *loadfn);
        ClearAccum::load_with(&mut *loadfn);
        ClearBufferData::load_with(&mut *loadfn);
        ClearBufferSubData::load_with(&mut *loadfn);
        ClearBufferfi::load_with(&mut *loadfn);
        ClearBufferfv::load_with(&mut *loadfn);
        ClearBufferiv::load_with(&mut *loadfn);
        ClearBufferuiv::load_with(&mut *loadfn);
        ClearColor::load_with(&mut *loadfn);
        ClearDepth::load_with(&mut *loadfn);
        ClearDepthf::load_with(&mut *loadfn);
        ClearIndex::load_with(&mut *loadfn);
        ClearNamedBufferData::load_with(&mut *loadfn);
        ClearNamedBufferSubData::load_with(&mut *loadfn);
        ClearNamedFramebufferfi::load_with(&mut *loadfn);
        ClearNamedFramebufferfv::load_with(&mut *loadfn);
        ClearNamedFramebufferiv::load_with(&mut *loadfn);
        ClearNamedFramebufferuiv::load_with(&mut *loadfn);
        ClearStencil::load_with(&mut *loadfn);
        ClearTexImage::load_with(&mut *loadfn);
        ClearTexSubImage::load_with(&mut *loadfn);
        ClientActiveTexture::load_with(&mut *loadfn);
        ClientWaitSync::load_with(&mut *loadfn);
        ClipControl::load_with(&mut *loadfn);
        ClipPlane::load_with(&mut *loadfn);
        Color3b::load_with(&mut *loadfn);
        Color3bv::load_with(&mut *loadfn);
        Color3d::load_with(&mut *loadfn);
        Color3dv::load_with(&mut *loadfn);
        Color3f::load_with(&mut *loadfn);
        Color3fv::load_with(&mut *loadfn);
        Color3i::load_with(&mut *loadfn);
        Color3iv::load_with(&mut *loadfn);
        Color3s::load_with(&mut *loadfn);
        Color3sv::load_with(&mut *loadfn);
        Color3ub::load_with(&mut *loadfn);
        Color3ubv::load_with(&mut *loadfn);
        Color3ui::load_with(&mut *loadfn);
        Color3uiv::load_with(&mut *loadfn);
        Color3us::load_with(&mut *loadfn);
        Color3usv::load_with(&mut *loadfn);
        Color4b::load_with(&mut *loadfn);
        Color4bv::load_with(&mut *loadfn);
        Color4d::load_with(&mut *loadfn);
        Color4dv::load_with(&mut *loadfn);
        Color4f::load_with(&mut *loadfn);
        Color4fv::load_with(&mut *loadfn);
        Color4i::load_with(&mut *loadfn);
        Color4iv::load_with(&mut *loadfn);
        Color4s::load_with(&mut *loadfn);
        Color4sv::load_with(&mut *loadfn);
        Color4ub::load_with(&mut *loadfn);
        Color4ubv::load_with(&mut *loadfn);
        Color4ui::load_with(&mut *loadfn);
        Color4uiv::load_with(&mut *loadfn);
        Color4us::load_with(&mut *loadfn);
        Color4usv::load_with(&mut *loadfn);
        ColorMask::load_with(&mut *loadfn);
        ColorMaski::load_with(&mut *loadfn);
        ColorMaterial::load_with(&mut *loadfn);
        ColorP3ui::load_with(&mut *loadfn);
        ColorP3uiv::load_with(&mut *loadfn);
        ColorP4ui::load_with(&mut *loadfn);
        ColorP4uiv::load_with(&mut *loadfn);
        ColorPointer::load_with(&mut *loadfn);
        CompileShader::load_with(&mut *loadfn);
        CompressedTexImage1D::load_with(&mut *loadfn);
        CompressedTexImage2D::load_with(&mut *loadfn);
        CompressedTexImage3D::load_with(&mut *loadfn);
        CompressedTexSubImage1D::load_with(&mut *loadfn);
        CompressedTexSubImage2D::load_with(&mut *loadfn);
        CompressedTexSubImage3D::load_with(&mut *loadfn);
        CompressedTextureSubImage1D::load_with(&mut *loadfn);
        CompressedTextureSubImage2D::load_with(&mut *loadfn);
        CompressedTextureSubImage3D::load_with(&mut *loadfn);
        CopyBufferSubData::load_with(&mut *loadfn);
        CopyImageSubData::load_with(&mut *loadfn);
        CopyNamedBufferSubData::load_with(&mut *loadfn);
        CopyPixels::load_with(&mut *loadfn);
        CopyTexImage1D::load_with(&mut *loadfn);
        CopyTexImage2D::load_with(&mut *loadfn);
        CopyTexSubImage1D::load_with(&mut *loadfn);
        CopyTexSubImage2D::load_with(&mut *loadfn);
        CopyTexSubImage3D::load_with(&mut *loadfn);
        CopyTextureSubImage1D::load_with(&mut *loadfn);
        CopyTextureSubImage2D::load_with(&mut *loadfn);
        CopyTextureSubImage3D::load_with(&mut *loadfn);
        CreateBuffers::load_with(&mut *loadfn);
        CreateFramebuffers::load_with(&mut *loadfn);
        CreateProgram::load_with(&mut *loadfn);
        CreateProgramPipelines::load_with(&mut *loadfn);
        CreateQueries::load_with(&mut *loadfn);
        CreateRenderbuffers::load_with(&mut *loadfn);
        CreateSamplers::load_with(&mut *loadfn);
        CreateShader::load_with(&mut *loadfn);
        CreateShaderProgramv::load_with(&mut *loadfn);
        CreateTextures::load_with(&mut *loadfn);
        CreateTransformFeedbacks::load_with(&mut *loadfn);
        CreateVertexArrays::load_with(&mut *loadfn);
        CullFace::load_with(&mut *loadfn);
        DebugMessageCallback::load_with(&mut *loadfn);
        DebugMessageControl::load_with(&mut *loadfn);
        DebugMessageInsert::load_with(&mut *loadfn);
        DeleteBuffers::load_with(&mut *loadfn);
        DeleteFramebuffers::load_with(&mut *loadfn);
        DeleteLists::load_with(&mut *loadfn);
        DeleteProgram::load_with(&mut *loadfn);
        DeleteProgramPipelines::load_with(&mut *loadfn);
        DeleteQueries::load_with(&mut *loadfn);
        DeleteRenderbuffers::load_with(&mut *loadfn);
        DeleteSamplers::load_with(&mut *loadfn);
        DeleteShader::load_with(&mut *loadfn);
        DeleteSync::load_with(&mut *loadfn);
        DeleteTextures::load_with(&mut *loadfn);
        DeleteTransformFeedbacks::load_with(&mut *loadfn);
        DeleteVertexArrays::load_with(&mut *loadfn);
        DepthFunc::load_with(&mut *loadfn);
        DepthMask::load_with(&mut *loadfn);
        DepthRange::load_with(&mut *loadfn);
        DepthRangeArrayv::load_with(&mut *loadfn);
        DepthRangeIndexed::load_with(&mut *loadfn);
        DepthRangef::load_with(&mut *loadfn);
        DetachShader::load_with(&mut *loadfn);
        Disable::load_with(&mut *loadfn);
        DisableClientState::load_with(&mut *loadfn);
        DisableVertexArrayAttrib::load_with(&mut *loadfn);
        DisableVertexAttribArray::load_with(&mut *loadfn);
        Disablei::load_with(&mut *loadfn);
        DispatchCompute::load_with(&mut *loadfn);
        DispatchComputeIndirect::load_with(&mut *loadfn);
        DrawArrays::load_with(&mut *loadfn);
        DrawArraysIndirect::load_with(&mut *loadfn);
        DrawArraysInstanced::load_with(&mut *loadfn);
        DrawArraysInstancedBaseInstance::load_with(&mut *loadfn);
        DrawBuffer::load_with(&mut *loadfn);
        DrawBuffers::load_with(&mut *loadfn);
        DrawElements::load_with(&mut *loadfn);
        DrawElementsBaseVertex::load_with(&mut *loadfn);
        DrawElementsIndirect::load_with(&mut *loadfn);
        DrawElementsInstanced::load_with(&mut *loadfn);
        DrawElementsInstancedBaseInstance::load_with(&mut *loadfn);
        DrawElementsInstancedBaseVertex::load_with(&mut *loadfn);
        DrawElementsInstancedBaseVertexBaseInstance::load_with(&mut *loadfn);
        DrawPixels::load_with(&mut *loadfn);
        DrawRangeElements::load_with(&mut *loadfn);
        DrawRangeElementsBaseVertex::load_with(&mut *loadfn);
        DrawTransformFeedback::load_with(&mut *loadfn);
        DrawTransformFeedbackInstanced::load_with(&mut *loadfn);
        DrawTransformFeedbackStream::load_with(&mut *loadfn);
        DrawTransformFeedbackStreamInstanced::load_with(&mut *loadfn);
        EdgeFlag::load_with(&mut *loadfn);
        EdgeFlagPointer::load_with(&mut *loadfn);
        EdgeFlagv::load_with(&mut *loadfn);
        Enable::load_with(&mut *loadfn);
        EnableClientState::load_with(&mut *loadfn);
        EnableVertexArrayAttrib::load_with(&mut *loadfn);
        EnableVertexAttribArray::load_with(&mut *loadfn);
        Enablei::load_with(&mut *loadfn);
        End::load_with(&mut *loadfn);
        EndConditionalRender::load_with(&mut *loadfn);
        EndList::load_with(&mut *loadfn);
        EndQuery::load_with(&mut *loadfn);
        EndQueryIndexed::load_with(&mut *loadfn);
        EndTransformFeedback::load_with(&mut *loadfn);
        EvalCoord1d::load_with(&mut *loadfn);
        EvalCoord1dv::load_with(&mut *loadfn);
        EvalCoord1f::load_with(&mut *loadfn);
        EvalCoord1fv::load_with(&mut *loadfn);
        EvalCoord2d::load_with(&mut *loadfn);
        EvalCoord2dv::load_with(&mut *loadfn);
        EvalCoord2f::load_with(&mut *loadfn);
        EvalCoord2fv::load_with(&mut *loadfn);
        EvalMesh1::load_with(&mut *loadfn);
        EvalMesh2::load_with(&mut *loadfn);
        EvalPoint1::load_with(&mut *loadfn);
        EvalPoint2::load_with(&mut *loadfn);
        FeedbackBuffer::load_with(&mut *loadfn);
        FenceSync::load_with(&mut *loadfn);
        Finish::load_with(&mut *loadfn);
        Flush::load_with(&mut *loadfn);
        FlushMappedBufferRange::load_with(&mut *loadfn);
        FlushMappedNamedBufferRange::load_with(&mut *loadfn);
        FogCoordPointer::load_with(&mut *loadfn);
        FogCoordd::load_with(&mut *loadfn);
        FogCoorddv::load_with(&mut *loadfn);
        FogCoordf::load_with(&mut *loadfn);
        FogCoordfv::load_with(&mut *loadfn);
        Fogf::load_with(&mut *loadfn);
        Fogfv::load_with(&mut *loadfn);
        Fogi::load_with(&mut *loadfn);
        Fogiv::load_with(&mut *loadfn);
        FramebufferParameteri::load_with(&mut *loadfn);
        FramebufferRenderbuffer::load_with(&mut *loadfn);
        FramebufferTexture::load_with(&mut *loadfn);
        FramebufferTexture1D::load_with(&mut *loadfn);
        FramebufferTexture2D::load_with(&mut *loadfn);
        FramebufferTexture3D::load_with(&mut *loadfn);
        FramebufferTextureLayer::load_with(&mut *loadfn);
        FrontFace::load_with(&mut *loadfn);
        Frustum::load_with(&mut *loadfn);
        GenBuffers::load_with(&mut *loadfn);
        GenFramebuffers::load_with(&mut *loadfn);
        GenLists::load_with(&mut *loadfn);
        GenProgramPipelines::load_with(&mut *loadfn);
        GenQueries::load_with(&mut *loadfn);
        GenRenderbuffers::load_with(&mut *loadfn);
        GenSamplers::load_with(&mut *loadfn);
        GenTextures::load_with(&mut *loadfn);
        GenTransformFeedbacks::load_with(&mut *loadfn);
        GenVertexArrays::load_with(&mut *loadfn);
        GenerateMipmap::load_with(&mut *loadfn);
        GenerateTextureMipmap::load_with(&mut *loadfn);
        GetActiveAtomicCounterBufferiv::load_with(&mut *loadfn);
        GetActiveAttrib::load_with(&mut *loadfn);
        GetActiveSubroutineName::load_with(&mut *loadfn);
        GetActiveSubroutineUniformName::load_with(&mut *loadfn);
        GetActiveSubroutineUniformiv::load_with(&mut *loadfn);
        GetActiveUniform::load_with(&mut *loadfn);
        GetActiveUniformBlockName::load_with(&mut *loadfn);
        GetActiveUniformBlockiv::load_with(&mut *loadfn);
        GetActiveUniformName::load_with(&mut *loadfn);
        GetActiveUniformsiv::load_with(&mut *loadfn);
        GetAttachedShaders::load_with(&mut *loadfn);
        GetAttribLocation::load_with(&mut *loadfn);
        GetBooleani_v::load_with(&mut *loadfn);
        GetBooleanv::load_with(&mut *loadfn);
        GetBufferParameteri64v::load_with(&mut *loadfn);
        GetBufferParameteriv::load_with(&mut *loadfn);
        GetBufferPointerv::load_with(&mut *loadfn);
        GetBufferSubData::load_with(&mut *loadfn);
        GetClipPlane::load_with(&mut *loadfn);
        GetCompressedTexImage::load_with(&mut *loadfn);
        GetCompressedTextureImage::load_with(&mut *loadfn);
        GetCompressedTextureSubImage::load_with(&mut *loadfn);
        GetDebugMessageLog::load_with(&mut *loadfn);
        GetDoublei_v::load_with(&mut *loadfn);
        GetDoublev::load_with(&mut *loadfn);
        GetError::load_with(&mut *loadfn);
        GetFloati_v::load_with(&mut *loadfn);
        GetFloatv::load_with(&mut *loadfn);
        GetFragDataIndex::load_with(&mut *loadfn);
        GetFragDataLocation::load_with(&mut *loadfn);
        GetFramebufferAttachmentParameteriv::load_with(&mut *loadfn);
        GetFramebufferParameteriv::load_with(&mut *loadfn);
        GetGraphicsResetStatus::load_with(&mut *loadfn);
        GetInteger64i_v::load_with(&mut *loadfn);
        GetInteger64v::load_with(&mut *loadfn);
        GetIntegeri_v::load_with(&mut *loadfn);
        GetIntegerv::load_with(&mut *loadfn);
        GetInternalformati64v::load_with(&mut *loadfn);
        GetInternalformativ::load_with(&mut *loadfn);
        GetLightfv::load_with(&mut *loadfn);
        GetLightiv::load_with(&mut *loadfn);
        GetMapdv::load_with(&mut *loadfn);
        GetMapfv::load_with(&mut *loadfn);
        GetMapiv::load_with(&mut *loadfn);
        GetMaterialfv::load_with(&mut *loadfn);
        GetMaterialiv::load_with(&mut *loadfn);
        GetMultisamplefv::load_with(&mut *loadfn);
        GetNamedBufferParameteri64v::load_with(&mut *loadfn);
        GetNamedBufferParameteriv::load_with(&mut *loadfn);
        GetNamedBufferPointerv::load_with(&mut *loadfn);
        GetNamedBufferSubData::load_with(&mut *loadfn);
        GetNamedFramebufferAttachmentParameteriv::load_with(&mut *loadfn);
        GetNamedFramebufferParameteriv::load_with(&mut *loadfn);
        GetNamedRenderbufferParameteriv::load_with(&mut *loadfn);
        GetObjectLabel::load_with(&mut *loadfn);
        GetObjectPtrLabel::load_with(&mut *loadfn);
        GetPixelMapfv::load_with(&mut *loadfn);
        GetPixelMapuiv::load_with(&mut *loadfn);
        GetPixelMapusv::load_with(&mut *loadfn);
        GetPointerv::load_with(&mut *loadfn);
        GetPolygonStipple::load_with(&mut *loadfn);
        GetProgramBinary::load_with(&mut *loadfn);
        GetProgramInfoLog::load_with(&mut *loadfn);
        GetProgramInterfaceiv::load_with(&mut *loadfn);
        GetProgramPipelineInfoLog::load_with(&mut *loadfn);
        GetProgramPipelineiv::load_with(&mut *loadfn);
        GetProgramResourceIndex::load_with(&mut *loadfn);
        GetProgramResourceLocation::load_with(&mut *loadfn);
        GetProgramResourceLocationIndex::load_with(&mut *loadfn);
        GetProgramResourceName::load_with(&mut *loadfn);
        GetProgramResourceiv::load_with(&mut *loadfn);
        GetProgramStageiv::load_with(&mut *loadfn);
        GetProgramiv::load_with(&mut *loadfn);
        GetQueryBufferObjecti64v::load_with(&mut *loadfn);
        GetQueryBufferObjectiv::load_with(&mut *loadfn);
        GetQueryBufferObjectui64v::load_with(&mut *loadfn);
        GetQueryBufferObjectuiv::load_with(&mut *loadfn);
        GetQueryIndexediv::load_with(&mut *loadfn);
        GetQueryObjecti64v::load_with(&mut *loadfn);
        GetQueryObjectiv::load_with(&mut *loadfn);
        GetQueryObjectui64v::load_with(&mut *loadfn);
        GetQueryObjectuiv::load_with(&mut *loadfn);
        GetQueryiv::load_with(&mut *loadfn);
        GetRenderbufferParameteriv::load_with(&mut *loadfn);
        GetSamplerParameterIiv::load_with(&mut *loadfn);
        GetSamplerParameterIuiv::load_with(&mut *loadfn);
        GetSamplerParameterfv::load_with(&mut *loadfn);
        GetSamplerParameteriv::load_with(&mut *loadfn);
        GetShaderInfoLog::load_with(&mut *loadfn);
        GetShaderPrecisionFormat::load_with(&mut *loadfn);
        GetShaderSource::load_with(&mut *loadfn);
        GetShaderiv::load_with(&mut *loadfn);
        GetString::load_with(&mut *loadfn);
        GetStringi::load_with(&mut *loadfn);
        GetSubroutineIndex::load_with(&mut *loadfn);
        GetSubroutineUniformLocation::load_with(&mut *loadfn);
        GetSynciv::load_with(&mut *loadfn);
        GetTexEnvfv::load_with(&mut *loadfn);
        GetTexEnviv::load_with(&mut *loadfn);
        GetTexGendv::load_with(&mut *loadfn);
        GetTexGenfv::load_with(&mut *loadfn);
        GetTexGeniv::load_with(&mut *loadfn);
        GetTexImage::load_with(&mut *loadfn);
        GetTexLevelParameterfv::load_with(&mut *loadfn);
        GetTexLevelParameteriv::load_with(&mut *loadfn);
        GetTexParameterIiv::load_with(&mut *loadfn);
        GetTexParameterIuiv::load_with(&mut *loadfn);
        GetTexParameterfv::load_with(&mut *loadfn);
        GetTexParameteriv::load_with(&mut *loadfn);
        GetTextureImage::load_with(&mut *loadfn);
        GetTextureLevelParameterfv::load_with(&mut *loadfn);
        GetTextureLevelParameteriv::load_with(&mut *loadfn);
        GetTextureParameterIiv::load_with(&mut *loadfn);
        GetTextureParameterIuiv::load_with(&mut *loadfn);
        GetTextureParameterfv::load_with(&mut *loadfn);
        GetTextureParameteriv::load_with(&mut *loadfn);
        GetTextureSubImage::load_with(&mut *loadfn);
        GetTransformFeedbackVarying::load_with(&mut *loadfn);
        GetTransformFeedbacki64_v::load_with(&mut *loadfn);
        GetTransformFeedbacki_v::load_with(&mut *loadfn);
        GetTransformFeedbackiv::load_with(&mut *loadfn);
        GetUniformBlockIndex::load_with(&mut *loadfn);
        GetUniformIndices::load_with(&mut *loadfn);
        GetUniformLocation::load_with(&mut *loadfn);
        GetUniformSubroutineuiv::load_with(&mut *loadfn);
        GetUniformdv::load_with(&mut *loadfn);
        GetUniformfv::load_with(&mut *loadfn);
        GetUniformiv::load_with(&mut *loadfn);
        GetUniformuiv::load_with(&mut *loadfn);
        GetVertexArrayIndexed64iv::load_with(&mut *loadfn);
        GetVertexArrayIndexediv::load_with(&mut *loadfn);
        GetVertexArrayiv::load_with(&mut *loadfn);
        GetVertexAttribIiv::load_with(&mut *loadfn);
        GetVertexAttribIuiv::load_with(&mut *loadfn);
        GetVertexAttribLdv::load_with(&mut *loadfn);
        GetVertexAttribPointerv::load_with(&mut *loadfn);
        GetVertexAttribdv::load_with(&mut *loadfn);
        GetVertexAttribfv::load_with(&mut *loadfn);
        GetVertexAttribiv::load_with(&mut *loadfn);
        GetnColorTable::load_with(&mut *loadfn);
        GetnCompressedTexImage::load_with(&mut *loadfn);
        GetnConvolutionFilter::load_with(&mut *loadfn);
        GetnHistogram::load_with(&mut *loadfn);
        GetnMapdv::load_with(&mut *loadfn);
        GetnMapfv::load_with(&mut *loadfn);
        GetnMapiv::load_with(&mut *loadfn);
        GetnMinmax::load_with(&mut *loadfn);
        GetnPixelMapfv::load_with(&mut *loadfn);
        GetnPixelMapuiv::load_with(&mut *loadfn);
        GetnPixelMapusv::load_with(&mut *loadfn);
        GetnPolygonStipple::load_with(&mut *loadfn);
        GetnSeparableFilter::load_with(&mut *loadfn);
        GetnTexImage::load_with(&mut *loadfn);
        GetnUniformdv::load_with(&mut *loadfn);
        GetnUniformfv::load_with(&mut *loadfn);
        GetnUniformiv::load_with(&mut *loadfn);
        GetnUniformuiv::load_with(&mut *loadfn);
        Hint::load_with(&mut *loadfn);
        IndexMask::load_with(&mut *loadfn);
        IndexPointer::load_with(&mut *loadfn);
        Indexd::load_with(&mut *loadfn);
        Indexdv::load_with(&mut *loadfn);
        Indexf::load_with(&mut *loadfn);
        Indexfv::load_with(&mut *loadfn);
        Indexi::load_with(&mut *loadfn);
        Indexiv::load_with(&mut *loadfn);
        Indexs::load_with(&mut *loadfn);
        Indexsv::load_with(&mut *loadfn);
        Indexub::load_with(&mut *loadfn);
        Indexubv::load_with(&mut *loadfn);
        InitNames::load_with(&mut *loadfn);
        InterleavedArrays::load_with(&mut *loadfn);
        InvalidateBufferData::load_with(&mut *loadfn);
        InvalidateBufferSubData::load_with(&mut *loadfn);
        InvalidateFramebuffer::load_with(&mut *loadfn);
        InvalidateNamedFramebufferData::load_with(&mut *loadfn);
        InvalidateNamedFramebufferSubData::load_with(&mut *loadfn);
        InvalidateSubFramebuffer::load_with(&mut *loadfn);
        InvalidateTexImage::load_with(&mut *loadfn);
        InvalidateTexSubImage::load_with(&mut *loadfn);
        IsBuffer::load_with(&mut *loadfn);
        IsEnabled::load_with(&mut *loadfn);
        IsEnabledi::load_with(&mut *loadfn);
        IsFramebuffer::load_with(&mut *loadfn);
        IsList::load_with(&mut *loadfn);
        IsProgram::load_with(&mut *loadfn);
        IsProgramPipeline::load_with(&mut *loadfn);
        IsQuery::load_with(&mut *loadfn);
        IsRenderbuffer::load_with(&mut *loadfn);
        IsSampler::load_with(&mut *loadfn);
        IsShader::load_with(&mut *loadfn);
        IsSync::load_with(&mut *loadfn);
        IsTexture::load_with(&mut *loadfn);
        IsTransformFeedback::load_with(&mut *loadfn);
        IsVertexArray::load_with(&mut *loadfn);
        LightModelf::load_with(&mut *loadfn);
        LightModelfv::load_with(&mut *loadfn);
        LightModeli::load_with(&mut *loadfn);
        LightModeliv::load_with(&mut *loadfn);
        Lightf::load_with(&mut *loadfn);
        Lightfv::load_with(&mut *loadfn);
        Lighti::load_with(&mut *loadfn);
        Lightiv::load_with(&mut *loadfn);
        LineStipple::load_with(&mut *loadfn);
        LineWidth::load_with(&mut *loadfn);
        LinkProgram::load_with(&mut *loadfn);
        ListBase::load_with(&mut *loadfn);
        LoadIdentity::load_with(&mut *loadfn);
        LoadMatrixd::load_with(&mut *loadfn);
        LoadMatrixf::load_with(&mut *loadfn);
        LoadName::load_with(&mut *loadfn);
        LoadTransposeMatrixd::load_with(&mut *loadfn);
        LoadTransposeMatrixf::load_with(&mut *loadfn);
        LogicOp::load_with(&mut *loadfn);
        Map1d::load_with(&mut *loadfn);
        Map1f::load_with(&mut *loadfn);
        Map2d::load_with(&mut *loadfn);
        Map2f::load_with(&mut *loadfn);
        MapBuffer::load_with(&mut *loadfn);
        MapBufferRange::load_with(&mut *loadfn);
        MapGrid1d::load_with(&mut *loadfn);
        MapGrid1f::load_with(&mut *loadfn);
        MapGrid2d::load_with(&mut *loadfn);
        MapGrid2f::load_with(&mut *loadfn);
        MapNamedBuffer::load_with(&mut *loadfn);
        MapNamedBufferRange::load_with(&mut *loadfn);
        Materialf::load_with(&mut *loadfn);
        Materialfv::load_with(&mut *loadfn);
        Materiali::load_with(&mut *loadfn);
        Materialiv::load_with(&mut *loadfn);
        MatrixMode::load_with(&mut *loadfn);
        MemoryBarrier::load_with(&mut *loadfn);
        MemoryBarrierByRegion::load_with(&mut *loadfn);
        MinSampleShading::load_with(&mut *loadfn);
        MultMatrixd::load_with(&mut *loadfn);
        MultMatrixf::load_with(&mut *loadfn);
        MultTransposeMatrixd::load_with(&mut *loadfn);
        MultTransposeMatrixf::load_with(&mut *loadfn);
        MultiDrawArrays::load_with(&mut *loadfn);
        MultiDrawArraysIndirect::load_with(&mut *loadfn);
        MultiDrawElements::load_with(&mut *loadfn);
        MultiDrawElementsBaseVertex::load_with(&mut *loadfn);
        MultiDrawElementsIndirect::load_with(&mut *loadfn);
        MultiTexCoord1d::load_with(&mut *loadfn);
        MultiTexCoord1dv::load_with(&mut *loadfn);
        MultiTexCoord1f::load_with(&mut *loadfn);
        MultiTexCoord1fv::load_with(&mut *loadfn);
        MultiTexCoord1i::load_with(&mut *loadfn);
        MultiTexCoord1iv::load_with(&mut *loadfn);
        MultiTexCoord1s::load_with(&mut *loadfn);
        MultiTexCoord1sv::load_with(&mut *loadfn);
        MultiTexCoord2d::load_with(&mut *loadfn);
        MultiTexCoord2dv::load_with(&mut *loadfn);
        MultiTexCoord2f::load_with(&mut *loadfn);
        MultiTexCoord2fv::load_with(&mut *loadfn);
        MultiTexCoord2i::load_with(&mut *loadfn);
        MultiTexCoord2iv::load_with(&mut *loadfn);
        MultiTexCoord2s::load_with(&mut *loadfn);
        MultiTexCoord2sv::load_with(&mut *loadfn);
        MultiTexCoord3d::load_with(&mut *loadfn);
        MultiTexCoord3dv::load_with(&mut *loadfn);
        MultiTexCoord3f::load_with(&mut *loadfn);
        MultiTexCoord3fv::load_with(&mut *loadfn);
        MultiTexCoord3i::load_with(&mut *loadfn);
        MultiTexCoord3iv::load_with(&mut *loadfn);
        MultiTexCoord3s::load_with(&mut *loadfn);
        MultiTexCoord3sv::load_with(&mut *loadfn);
        MultiTexCoord4d::load_with(&mut *loadfn);
        MultiTexCoord4dv::load_with(&mut *loadfn);
        MultiTexCoord4f::load_with(&mut *loadfn);
        MultiTexCoord4fv::load_with(&mut *loadfn);
        MultiTexCoord4i::load_with(&mut *loadfn);
        MultiTexCoord4iv::load_with(&mut *loadfn);
        MultiTexCoord4s::load_with(&mut *loadfn);
        MultiTexCoord4sv::load_with(&mut *loadfn);
        MultiTexCoordP1ui::load_with(&mut *loadfn);
        MultiTexCoordP1uiv::load_with(&mut *loadfn);
        MultiTexCoordP2ui::load_with(&mut *loadfn);
        MultiTexCoordP2uiv::load_with(&mut *loadfn);
        MultiTexCoordP3ui::load_with(&mut *loadfn);
        MultiTexCoordP3uiv::load_with(&mut *loadfn);
        MultiTexCoordP4ui::load_with(&mut *loadfn);
        MultiTexCoordP4uiv::load_with(&mut *loadfn);
        NamedBufferData::load_with(&mut *loadfn);
        NamedBufferStorage::load_with(&mut *loadfn);
        NamedBufferSubData::load_with(&mut *loadfn);
        NamedFramebufferDrawBuffer::load_with(&mut *loadfn);
        NamedFramebufferDrawBuffers::load_with(&mut *loadfn);
        NamedFramebufferParameteri::load_with(&mut *loadfn);
        NamedFramebufferReadBuffer::load_with(&mut *loadfn);
        NamedFramebufferRenderbuffer::load_with(&mut *loadfn);
        NamedFramebufferTexture::load_with(&mut *loadfn);
        NamedFramebufferTextureLayer::load_with(&mut *loadfn);
        NamedRenderbufferStorage::load_with(&mut *loadfn);
        NamedRenderbufferStorageMultisample::load_with(&mut *loadfn);
        NewList::load_with(&mut *loadfn);
        Normal3b::load_with(&mut *loadfn);
        Normal3bv::load_with(&mut *loadfn);
        Normal3d::load_with(&mut *loadfn);
        Normal3dv::load_with(&mut *loadfn);
        Normal3f::load_with(&mut *loadfn);
        Normal3fv::load_with(&mut *loadfn);
        Normal3i::load_with(&mut *loadfn);
        Normal3iv::load_with(&mut *loadfn);
        Normal3s::load_with(&mut *loadfn);
        Normal3sv::load_with(&mut *loadfn);
        NormalP3ui::load_with(&mut *loadfn);
        NormalP3uiv::load_with(&mut *loadfn);
        NormalPointer::load_with(&mut *loadfn);
        ObjectLabel::load_with(&mut *loadfn);
        ObjectPtrLabel::load_with(&mut *loadfn);
        Ortho::load_with(&mut *loadfn);
        PassThrough::load_with(&mut *loadfn);
        PatchParameterfv::load_with(&mut *loadfn);
        PatchParameteri::load_with(&mut *loadfn);
        PauseTransformFeedback::load_with(&mut *loadfn);
        PixelMapfv::load_with(&mut *loadfn);
        PixelMapuiv::load_with(&mut *loadfn);
        PixelMapusv::load_with(&mut *loadfn);
        PixelStoref::load_with(&mut *loadfn);
        PixelStorei::load_with(&mut *loadfn);
        PixelTransferf::load_with(&mut *loadfn);
        PixelTransferi::load_with(&mut *loadfn);
        PixelZoom::load_with(&mut *loadfn);
        PointParameterf::load_with(&mut *loadfn);
        PointParameterfv::load_with(&mut *loadfn);
        PointParameteri::load_with(&mut *loadfn);
        PointParameteriv::load_with(&mut *loadfn);
        PointSize::load_with(&mut *loadfn);
        PolygonMode::load_with(&mut *loadfn);
        PolygonOffset::load_with(&mut *loadfn);
        PolygonStipple::load_with(&mut *loadfn);
        PopAttrib::load_with(&mut *loadfn);
        PopClientAttrib::load_with(&mut *loadfn);
        PopDebugGroup::load_with(&mut *loadfn);
        PopMatrix::load_with(&mut *loadfn);
        PopName::load_with(&mut *loadfn);
        PrimitiveRestartIndex::load_with(&mut *loadfn);
        PrioritizeTextures::load_with(&mut *loadfn);
        ProgramBinary::load_with(&mut *loadfn);
        ProgramParameteri::load_with(&mut *loadfn);
        ProgramUniform1d::load_with(&mut *loadfn);
        ProgramUniform1dv::load_with(&mut *loadfn);
        ProgramUniform1f::load_with(&mut *loadfn);
        ProgramUniform1fv::load_with(&mut *loadfn);
        ProgramUniform1i::load_with(&mut *loadfn);
        ProgramUniform1iv::load_with(&mut *loadfn);
        ProgramUniform1ui::load_with(&mut *loadfn);
        ProgramUniform1uiv::load_with(&mut *loadfn);
        ProgramUniform2d::load_with(&mut *loadfn);
        ProgramUniform2dv::load_with(&mut *loadfn);
        ProgramUniform2f::load_with(&mut *loadfn);
        ProgramUniform2fv::load_with(&mut *loadfn);
        ProgramUniform2i::load_with(&mut *loadfn);
        ProgramUniform2iv::load_with(&mut *loadfn);
        ProgramUniform2ui::load_with(&mut *loadfn);
        ProgramUniform2uiv::load_with(&mut *loadfn);
        ProgramUniform3d::load_with(&mut *loadfn);
        ProgramUniform3dv::load_with(&mut *loadfn);
        ProgramUniform3f::load_with(&mut *loadfn);
        ProgramUniform3fv::load_with(&mut *loadfn);
        ProgramUniform3i::load_with(&mut *loadfn);
        ProgramUniform3iv::load_with(&mut *loadfn);
        ProgramUniform3ui::load_with(&mut *loadfn);
        ProgramUniform3uiv::load_with(&mut *loadfn);
        ProgramUniform4d::load_with(&mut *loadfn);
        ProgramUniform4dv::load_with(&mut *loadfn);
        ProgramUniform4f::load_with(&mut *loadfn);
        ProgramUniform4fv::load_with(&mut *loadfn);
        ProgramUniform4i::load_with(&mut *loadfn);
        ProgramUniform4iv::load_with(&mut *loadfn);
        ProgramUniform4ui::load_with(&mut *loadfn);
        ProgramUniform4uiv::load_with(&mut *loadfn);
        ProgramUniformMatrix2dv::load_with(&mut *loadfn);
        ProgramUniformMatrix2fv::load_with(&mut *loadfn);
        ProgramUniformMatrix2x3dv::load_with(&mut *loadfn);
        ProgramUniformMatrix2x3fv::load_with(&mut *loadfn);
        ProgramUniformMatrix2x4dv::load_with(&mut *loadfn);
        ProgramUniformMatrix2x4fv::load_with(&mut *loadfn);
        ProgramUniformMatrix3dv::load_with(&mut *loadfn);
        ProgramUniformMatrix3fv::load_with(&mut *loadfn);
        ProgramUniformMatrix3x2dv::load_with(&mut *loadfn);
        ProgramUniformMatrix3x2fv::load_with(&mut *loadfn);
        ProgramUniformMatrix3x4dv::load_with(&mut *loadfn);
        ProgramUniformMatrix3x4fv::load_with(&mut *loadfn);
        ProgramUniformMatrix4dv::load_with(&mut *loadfn);
        ProgramUniformMatrix4fv::load_with(&mut *loadfn);
        ProgramUniformMatrix4x2dv::load_with(&mut *loadfn);
        ProgramUniformMatrix4x2fv::load_with(&mut *loadfn);
        ProgramUniformMatrix4x3dv::load_with(&mut *loadfn);
        ProgramUniformMatrix4x3fv::load_with(&mut *loadfn);
        ProvokingVertex::load_with(&mut *loadfn);
        PushAttrib::load_with(&mut *loadfn);
        PushClientAttrib::load_with(&mut *loadfn);
        PushDebugGroup::load_with(&mut *loadfn);
        PushMatrix::load_with(&mut *loadfn);
        PushName::load_with(&mut *loadfn);
        QueryCounter::load_with(&mut *loadfn);
        RasterPos2d::load_with(&mut *loadfn);
        RasterPos2dv::load_with(&mut *loadfn);
        RasterPos2f::load_with(&mut *loadfn);
        RasterPos2fv::load_with(&mut *loadfn);
        RasterPos2i::load_with(&mut *loadfn);
        RasterPos2iv::load_with(&mut *loadfn);
        RasterPos2s::load_with(&mut *loadfn);
        RasterPos2sv::load_with(&mut *loadfn);
        RasterPos3d::load_with(&mut *loadfn);
        RasterPos3dv::load_with(&mut *loadfn);
        RasterPos3f::load_with(&mut *loadfn);
        RasterPos3fv::load_with(&mut *loadfn);
        RasterPos3i::load_with(&mut *loadfn);
        RasterPos3iv::load_with(&mut *loadfn);
        RasterPos3s::load_with(&mut *loadfn);
        RasterPos3sv::load_with(&mut *loadfn);
        RasterPos4d::load_with(&mut *loadfn);
        RasterPos4dv::load_with(&mut *loadfn);
        RasterPos4f::load_with(&mut *loadfn);
        RasterPos4fv::load_with(&mut *loadfn);
        RasterPos4i::load_with(&mut *loadfn);
        RasterPos4iv::load_with(&mut *loadfn);
        RasterPos4s::load_with(&mut *loadfn);
        RasterPos4sv::load_with(&mut *loadfn);
        ReadBuffer::load_with(&mut *loadfn);
        ReadPixels::load_with(&mut *loadfn);
        ReadnPixels::load_with(&mut *loadfn);
        Rectd::load_with(&mut *loadfn);
        Rectdv::load_with(&mut *loadfn);
        Rectf::load_with(&mut *loadfn);
        Rectfv::load_with(&mut *loadfn);
        Recti::load_with(&mut *loadfn);
        Rectiv::load_with(&mut *loadfn);
        Rects::load_with(&mut *loadfn);
        Rectsv::load_with(&mut *loadfn);
        ReleaseShaderCompiler::load_with(&mut *loadfn);
        RenderMode::load_with(&mut *loadfn);
        RenderbufferStorage::load_with(&mut *loadfn);
        RenderbufferStorageMultisample::load_with(&mut *loadfn);
        ResumeTransformFeedback::load_with(&mut *loadfn);
        Rotated::load_with(&mut *loadfn);
        Rotatef::load_with(&mut *loadfn);
        SampleCoverage::load_with(&mut *loadfn);
        SampleMaski::load_with(&mut *loadfn);
        SamplerParameterIiv::load_with(&mut *loadfn);
        SamplerParameterIuiv::load_with(&mut *loadfn);
        SamplerParameterf::load_with(&mut *loadfn);
        SamplerParameterfv::load_with(&mut *loadfn);
        SamplerParameteri::load_with(&mut *loadfn);
        SamplerParameteriv::load_with(&mut *loadfn);
        Scaled::load_with(&mut *loadfn);
        Scalef::load_with(&mut *loadfn);
        Scissor::load_with(&mut *loadfn);
        ScissorArrayv::load_with(&mut *loadfn);
        ScissorIndexed::load_with(&mut *loadfn);
        ScissorIndexedv::load_with(&mut *loadfn);
        SecondaryColor3b::load_with(&mut *loadfn);
        SecondaryColor3bv::load_with(&mut *loadfn);
        SecondaryColor3d::load_with(&mut *loadfn);
        SecondaryColor3dv::load_with(&mut *loadfn);
        SecondaryColor3f::load_with(&mut *loadfn);
        SecondaryColor3fv::load_with(&mut *loadfn);
        SecondaryColor3i::load_with(&mut *loadfn);
        SecondaryColor3iv::load_with(&mut *loadfn);
        SecondaryColor3s::load_with(&mut *loadfn);
        SecondaryColor3sv::load_with(&mut *loadfn);
        SecondaryColor3ub::load_with(&mut *loadfn);
        SecondaryColor3ubv::load_with(&mut *loadfn);
        SecondaryColor3ui::load_with(&mut *loadfn);
        SecondaryColor3uiv::load_with(&mut *loadfn);
        SecondaryColor3us::load_with(&mut *loadfn);
        SecondaryColor3usv::load_with(&mut *loadfn);
        SecondaryColorP3ui::load_with(&mut *loadfn);
        SecondaryColorP3uiv::load_with(&mut *loadfn);
        SecondaryColorPointer::load_with(&mut *loadfn);
        SelectBuffer::load_with(&mut *loadfn);
        ShadeModel::load_with(&mut *loadfn);
        ShaderBinary::load_with(&mut *loadfn);
        ShaderSource::load_with(&mut *loadfn);
        ShaderStorageBlockBinding::load_with(&mut *loadfn);
        StencilFunc::load_with(&mut *loadfn);
        StencilFuncSeparate::load_with(&mut *loadfn);
        StencilMask::load_with(&mut *loadfn);
        StencilMaskSeparate::load_with(&mut *loadfn);
        StencilOp::load_with(&mut *loadfn);
        StencilOpSeparate::load_with(&mut *loadfn);
        TexBuffer::load_with(&mut *loadfn);
        TexBufferRange::load_with(&mut *loadfn);
        TexCoord1d::load_with(&mut *loadfn);
        TexCoord1dv::load_with(&mut *loadfn);
        TexCoord1f::load_with(&mut *loadfn);
        TexCoord1fv::load_with(&mut *loadfn);
        TexCoord1i::load_with(&mut *loadfn);
        TexCoord1iv::load_with(&mut *loadfn);
        TexCoord1s::load_with(&mut *loadfn);
        TexCoord1sv::load_with(&mut *loadfn);
        TexCoord2d::load_with(&mut *loadfn);
        TexCoord2dv::load_with(&mut *loadfn);
        TexCoord2f::load_with(&mut *loadfn);
        TexCoord2fv::load_with(&mut *loadfn);
        TexCoord2i::load_with(&mut *loadfn);
        TexCoord2iv::load_with(&mut *loadfn);
        TexCoord2s::load_with(&mut *loadfn);
        TexCoord2sv::load_with(&mut *loadfn);
        TexCoord3d::load_with(&mut *loadfn);
        TexCoord3dv::load_with(&mut *loadfn);
        TexCoord3f::load_with(&mut *loadfn);
        TexCoord3fv::load_with(&mut *loadfn);
        TexCoord3i::load_with(&mut *loadfn);
        TexCoord3iv::load_with(&mut *loadfn);
        TexCoord3s::load_with(&mut *loadfn);
        TexCoord3sv::load_with(&mut *loadfn);
        TexCoord4d::load_with(&mut *loadfn);
        TexCoord4dv::load_with(&mut *loadfn);
        TexCoord4f::load_with(&mut *loadfn);
        TexCoord4fv::load_with(&mut *loadfn);
        TexCoord4i::load_with(&mut *loadfn);
        TexCoord4iv::load_with(&mut *loadfn);
        TexCoord4s::load_with(&mut *loadfn);
        TexCoord4sv::load_with(&mut *loadfn);
        TexCoordP1ui::load_with(&mut *loadfn);
        TexCoordP1uiv::load_with(&mut *loadfn);
        TexCoordP2ui::load_with(&mut *loadfn);
        TexCoordP2uiv::load_with(&mut *loadfn);
        TexCoordP3ui::load_with(&mut *loadfn);
        TexCoordP3uiv::load_with(&mut *loadfn);
        TexCoordP4ui::load_with(&mut *loadfn);
        TexCoordP4uiv::load_with(&mut *loadfn);
        TexCoordPointer::load_with(&mut *loadfn);
        TexEnvf::load_with(&mut *loadfn);
        TexEnvfv::load_with(&mut *loadfn);
        TexEnvi::load_with(&mut *loadfn);
        TexEnviv::load_with(&mut *loadfn);
        TexGend::load_with(&mut *loadfn);
        TexGendv::load_with(&mut *loadfn);
        TexGenf::load_with(&mut *loadfn);
        TexGenfv::load_with(&mut *loadfn);
        TexGeni::load_with(&mut *loadfn);
        TexGeniv::load_with(&mut *loadfn);
        TexImage1D::load_with(&mut *loadfn);
        TexImage2D::load_with(&mut *loadfn);
        TexImage2DMultisample::load_with(&mut *loadfn);
        TexImage3D::load_with(&mut *loadfn);
        TexImage3DMultisample::load_with(&mut *loadfn);
        TexParameterIiv::load_with(&mut *loadfn);
        TexParameterIuiv::load_with(&mut *loadfn);
        TexParameterf::load_with(&mut *loadfn);
        TexParameterfv::load_with(&mut *loadfn);
        TexParameteri::load_with(&mut *loadfn);
        TexParameteriv::load_with(&mut *loadfn);
        TexStorage1D::load_with(&mut *loadfn);
        TexStorage2D::load_with(&mut *loadfn);
        TexStorage2DMultisample::load_with(&mut *loadfn);
        TexStorage3D::load_with(&mut *loadfn);
        TexStorage3DMultisample::load_with(&mut *loadfn);
        TexSubImage1D::load_with(&mut *loadfn);
        TexSubImage2D::load_with(&mut *loadfn);
        TexSubImage3D::load_with(&mut *loadfn);
        TextureBarrier::load_with(&mut *loadfn);
        TextureBuffer::load_with(&mut *loadfn);
        TextureBufferRange::load_with(&mut *loadfn);
        TextureParameterIiv::load_with(&mut *loadfn);
        TextureParameterIuiv::load_with(&mut *loadfn);
        TextureParameterf::load_with(&mut *loadfn);
        TextureParameterfv::load_with(&mut *loadfn);
        TextureParameteri::load_with(&mut *loadfn);
        TextureParameteriv::load_with(&mut *loadfn);
        TextureStorage1D::load_with(&mut *loadfn);
        TextureStorage2D::load_with(&mut *loadfn);
        TextureStorage2DMultisample::load_with(&mut *loadfn);
        TextureStorage3D::load_with(&mut *loadfn);
        TextureStorage3DMultisample::load_with(&mut *loadfn);
        TextureSubImage1D::load_with(&mut *loadfn);
        TextureSubImage2D::load_with(&mut *loadfn);
        TextureSubImage3D::load_with(&mut *loadfn);
        TextureView::load_with(&mut *loadfn);
        TransformFeedbackBufferBase::load_with(&mut *loadfn);
        TransformFeedbackBufferRange::load_with(&mut *loadfn);
        TransformFeedbackVaryings::load_with(&mut *loadfn);
        Translated::load_with(&mut *loadfn);
        Translatef::load_with(&mut *loadfn);
        Uniform1d::load_with(&mut *loadfn);
        Uniform1dv::load_with(&mut *loadfn);
        Uniform1f::load_with(&mut *loadfn);
        Uniform1fv::load_with(&mut *loadfn);
        Uniform1i::load_with(&mut *loadfn);
        Uniform1iv::load_with(&mut *loadfn);
        Uniform1ui::load_with(&mut *loadfn);
        Uniform1uiv::load_with(&mut *loadfn);
        Uniform2d::load_with(&mut *loadfn);
        Uniform2dv::load_with(&mut *loadfn);
        Uniform2f::load_with(&mut *loadfn);
        Uniform2fv::load_with(&mut *loadfn);
        Uniform2i::load_with(&mut *loadfn);
        Uniform2iv::load_with(&mut *loadfn);
        Uniform2ui::load_with(&mut *loadfn);
        Uniform2uiv::load_with(&mut *loadfn);
        Uniform3d::load_with(&mut *loadfn);
        Uniform3dv::load_with(&mut *loadfn);
        Uniform3f::load_with(&mut *loadfn);
        Uniform3fv::load_with(&mut *loadfn);
        Uniform3i::load_with(&mut *loadfn);
        Uniform3iv::load_with(&mut *loadfn);
        Uniform3ui::load_with(&mut *loadfn);
        Uniform3uiv::load_with(&mut *loadfn);
        Uniform4d::load_with(&mut *loadfn);
        Uniform4dv::load_with(&mut *loadfn);
        Uniform4f::load_with(&mut *loadfn);
        Uniform4fv::load_with(&mut *loadfn);
        Uniform4i::load_with(&mut *loadfn);
        Uniform4iv::load_with(&mut *loadfn);
        Uniform4ui::load_with(&mut *loadfn);
        Uniform4uiv::load_with(&mut *loadfn);
        UniformBlockBinding::load_with(&mut *loadfn);
        UniformMatrix2dv::load_with(&mut *loadfn);
        UniformMatrix2fv::load_with(&mut *loadfn);
        UniformMatrix2x3dv::load_with(&mut *loadfn);
        UniformMatrix2x3fv::load_with(&mut *loadfn);
        UniformMatrix2x4dv::load_with(&mut *loadfn);
        UniformMatrix2x4fv::load_with(&mut *loadfn);
        UniformMatrix3dv::load_with(&mut *loadfn);
        UniformMatrix3fv::load_with(&mut *loadfn);
        UniformMatrix3x2dv::load_with(&mut *loadfn);
        UniformMatrix3x2fv::load_with(&mut *loadfn);
        UniformMatrix3x4dv::load_with(&mut *loadfn);
        UniformMatrix3x4fv::load_with(&mut *loadfn);
        UniformMatrix4dv::load_with(&mut *loadfn);
        UniformMatrix4fv::load_with(&mut *loadfn);
        UniformMatrix4x2dv::load_with(&mut *loadfn);
        UniformMatrix4x2fv::load_with(&mut *loadfn);
        UniformMatrix4x3dv::load_with(&mut *loadfn);
        UniformMatrix4x3fv::load_with(&mut *loadfn);
        UniformSubroutinesuiv::load_with(&mut *loadfn);
        UnmapBuffer::load_with(&mut *loadfn);
        UnmapNamedBuffer::load_with(&mut *loadfn);
        UseProgram::load_with(&mut *loadfn);
        UseProgramStages::load_with(&mut *loadfn);
        ValidateProgram::load_with(&mut *loadfn);
        ValidateProgramPipeline::load_with(&mut *loadfn);
        Vertex2d::load_with(&mut *loadfn);
        Vertex2dv::load_with(&mut *loadfn);
        Vertex2f::load_with(&mut *loadfn);
        Vertex2fv::load_with(&mut *loadfn);
        Vertex2i::load_with(&mut *loadfn);
        Vertex2iv::load_with(&mut *loadfn);
        Vertex2s::load_with(&mut *loadfn);
        Vertex2sv::load_with(&mut *loadfn);
        Vertex3d::load_with(&mut *loadfn);
        Vertex3dv::load_with(&mut *loadfn);
        Vertex3f::load_with(&mut *loadfn);
        Vertex3fv::load_with(&mut *loadfn);
        Vertex3i::load_with(&mut *loadfn);
        Vertex3iv::load_with(&mut *loadfn);
        Vertex3s::load_with(&mut *loadfn);
        Vertex3sv::load_with(&mut *loadfn);
        Vertex4d::load_with(&mut *loadfn);
        Vertex4dv::load_with(&mut *loadfn);
        Vertex4f::load_with(&mut *loadfn);
        Vertex4fv::load_with(&mut *loadfn);
        Vertex4i::load_with(&mut *loadfn);
        Vertex4iv::load_with(&mut *loadfn);
        Vertex4s::load_with(&mut *loadfn);
        Vertex4sv::load_with(&mut *loadfn);
        VertexArrayAttribBinding::load_with(&mut *loadfn);
        VertexArrayAttribFormat::load_with(&mut *loadfn);
        VertexArrayAttribIFormat::load_with(&mut *loadfn);
        VertexArrayAttribLFormat::load_with(&mut *loadfn);
        VertexArrayBindingDivisor::load_with(&mut *loadfn);
        VertexArrayElementBuffer::load_with(&mut *loadfn);
        VertexArrayVertexBuffer::load_with(&mut *loadfn);
        VertexArrayVertexBuffers::load_with(&mut *loadfn);
        VertexAttrib1d::load_with(&mut *loadfn);
        VertexAttrib1dv::load_with(&mut *loadfn);
        VertexAttrib1f::load_with(&mut *loadfn);
        VertexAttrib1fv::load_with(&mut *loadfn);
        VertexAttrib1s::load_with(&mut *loadfn);
        VertexAttrib1sv::load_with(&mut *loadfn);
        VertexAttrib2d::load_with(&mut *loadfn);
        VertexAttrib2dv::load_with(&mut *loadfn);
        VertexAttrib2f::load_with(&mut *loadfn);
        VertexAttrib2fv::load_with(&mut *loadfn);
        VertexAttrib2s::load_with(&mut *loadfn);
        VertexAttrib2sv::load_with(&mut *loadfn);
        VertexAttrib3d::load_with(&mut *loadfn);
        VertexAttrib3dv::load_with(&mut *loadfn);
        VertexAttrib3f::load_with(&mut *loadfn);
        VertexAttrib3fv::load_with(&mut *loadfn);
        VertexAttrib3s::load_with(&mut *loadfn);
        VertexAttrib3sv::load_with(&mut *loadfn);
        VertexAttrib4Nbv::load_with(&mut *loadfn);
        VertexAttrib4Niv::load_with(&mut *loadfn);
        VertexAttrib4Nsv::load_with(&mut *loadfn);
        VertexAttrib4Nub::load_with(&mut *loadfn);
        VertexAttrib4Nubv::load_with(&mut *loadfn);
        VertexAttrib4Nuiv::load_with(&mut *loadfn);
        VertexAttrib4Nusv::load_with(&mut *loadfn);
        VertexAttrib4bv::load_with(&mut *loadfn);
        VertexAttrib4d::load_with(&mut *loadfn);
        VertexAttrib4dv::load_with(&mut *loadfn);
        VertexAttrib4f::load_with(&mut *loadfn);
        VertexAttrib4fv::load_with(&mut *loadfn);
        VertexAttrib4iv::load_with(&mut *loadfn);
        VertexAttrib4s::load_with(&mut *loadfn);
        VertexAttrib4sv::load_with(&mut *loadfn);
        VertexAttrib4ubv::load_with(&mut *loadfn);
        VertexAttrib4uiv::load_with(&mut *loadfn);
        VertexAttrib4usv::load_with(&mut *loadfn);
        VertexAttribBinding::load_with(&mut *loadfn);
        VertexAttribDivisor::load_with(&mut *loadfn);
        VertexAttribFormat::load_with(&mut *loadfn);
        VertexAttribI1i::load_with(&mut *loadfn);
        VertexAttribI1iv::load_with(&mut *loadfn);
        VertexAttribI1ui::load_with(&mut *loadfn);
        VertexAttribI1uiv::load_with(&mut *loadfn);
        VertexAttribI2i::load_with(&mut *loadfn);
        VertexAttribI2iv::load_with(&mut *loadfn);
        VertexAttribI2ui::load_with(&mut *loadfn);
        VertexAttribI2uiv::load_with(&mut *loadfn);
        VertexAttribI3i::load_with(&mut *loadfn);
        VertexAttribI3iv::load_with(&mut *loadfn);
        VertexAttribI3ui::load_with(&mut *loadfn);
        VertexAttribI3uiv::load_with(&mut *loadfn);
        VertexAttribI4bv::load_with(&mut *loadfn);
        VertexAttribI4i::load_with(&mut *loadfn);
        VertexAttribI4iv::load_with(&mut *loadfn);
        VertexAttribI4sv::load_with(&mut *loadfn);
        VertexAttribI4ubv::load_with(&mut *loadfn);
        VertexAttribI4ui::load_with(&mut *loadfn);
        VertexAttribI4uiv::load_with(&mut *loadfn);
        VertexAttribI4usv::load_with(&mut *loadfn);
        VertexAttribIFormat::load_with(&mut *loadfn);
        VertexAttribIPointer::load_with(&mut *loadfn);
        VertexAttribL1d::load_with(&mut *loadfn);
        VertexAttribL1dv::load_with(&mut *loadfn);
        VertexAttribL2d::load_with(&mut *loadfn);
        VertexAttribL2dv::load_with(&mut *loadfn);
        VertexAttribL3d::load_with(&mut *loadfn);
        VertexAttribL3dv::load_with(&mut *loadfn);
        VertexAttribL4d::load_with(&mut *loadfn);
        VertexAttribL4dv::load_with(&mut *loadfn);
        VertexAttribLFormat::load_with(&mut *loadfn);
        VertexAttribLPointer::load_with(&mut *loadfn);
        VertexAttribP1ui::load_with(&mut *loadfn);
        VertexAttribP1uiv::load_with(&mut *loadfn);
        VertexAttribP2ui::load_with(&mut *loadfn);
        VertexAttribP2uiv::load_with(&mut *loadfn);
        VertexAttribP3ui::load_with(&mut *loadfn);
        VertexAttribP3uiv::load_with(&mut *loadfn);
        VertexAttribP4ui::load_with(&mut *loadfn);
        VertexAttribP4uiv::load_with(&mut *loadfn);
        VertexAttribPointer::load_with(&mut *loadfn);
        VertexBindingDivisor::load_with(&mut *loadfn);
        VertexP2ui::load_with(&mut *loadfn);
        VertexP2uiv::load_with(&mut *loadfn);
        VertexP3ui::load_with(&mut *loadfn);
        VertexP3uiv::load_with(&mut *loadfn);
        VertexP4ui::load_with(&mut *loadfn);
        VertexP4uiv::load_with(&mut *loadfn);
        VertexPointer::load_with(&mut *loadfn);
        Viewport::load_with(&mut *loadfn);
        ViewportArrayv::load_with(&mut *loadfn);
        ViewportIndexedf::load_with(&mut *loadfn);
        ViewportIndexedfv::load_with(&mut *loadfn);
        WaitSync::load_with(&mut *loadfn);
        WindowPos2d::load_with(&mut *loadfn);
        WindowPos2dv::load_with(&mut *loadfn);
        WindowPos2f::load_with(&mut *loadfn);
        WindowPos2fv::load_with(&mut *loadfn);
        WindowPos2i::load_with(&mut *loadfn);
        WindowPos2iv::load_with(&mut *loadfn);
        WindowPos2s::load_with(&mut *loadfn);
        WindowPos2sv::load_with(&mut *loadfn);
        WindowPos3d::load_with(&mut *loadfn);
        WindowPos3dv::load_with(&mut *loadfn);
        WindowPos3f::load_with(&mut *loadfn);
        WindowPos3fv::load_with(&mut *loadfn);
        WindowPos3i::load_with(&mut *loadfn);
        WindowPos3iv::load_with(&mut *loadfn);
        WindowPos3s::load_with(&mut *loadfn);
        WindowPos3sv::load_with(&mut *loadfn);
    }

    inner(&mut loadfn)
}
    
